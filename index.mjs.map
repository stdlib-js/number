{"version":3,"file":"index.mjs","sources":["../ctor/lib/main.js","../float64/base/to-float32/lib/main.js","../float64/base/to-float32/lib/polyfill.js","../float64/base/to-float32/lib/index.js","../float32/base/to-word/lib/main.js","../float32/base/ulp-difference/lib/main.js","../float32/base/assert/lib/index.js","../float32/base/assert/is-almost-equal/lib/main.js","../float32/base/assert/is-same-value/lib/main.js","../float32/base/assert/is-same-value-zero/lib/main.js","../float32/base/from-word/lib/main.js","../float32/base/normalize/lib/assign.js","../float32/base/normalize/lib/main.js","../float32/base/normalize/lib/index.js","../float32/base/to-binary-string/lib/div2.js","../float32/base/to-binary-string/lib/mult2.js","../float32/base/lib/index.js","../float32/base/add/lib/main.js","../float32/base/div/lib/main.js","../float32/base/exponent/lib/main.js","../float32/base/from-binary-string/lib/main.js","../float32/base/from-binary-string/lib/tofrac.js","../float32/base/identity/lib/main.js","../float32/base/mul/lib/main.js","../float32/base/signbit/lib/main.js","../float32/base/significand/lib/main.js","../float32/base/sub/lib/main.js","../float32/base/to-binary-string/lib/main.js","../float32/base/to-int32/lib/main.js","../float32/base/to-uint32/lib/main.js","../float32/lib/index.js","../float64/base/to-words/lib/indices.js","../float64/base/to-words/lib/assign.js","../float64/base/to-words/lib/main.js","../float64/base/to-words/lib/index.js","../float64/base/ulp-difference/lib/main.js","../float64/base/assert/lib/index.js","../float64/base/assert/is-almost-equal/lib/main.js","../float64/base/assert/is-same-value/lib/main.js","../float64/base/assert/is-same-value-zero/lib/main.js","../float64/base/get-high-word/lib/high.js","../float64/base/get-high-word/lib/main.js","../float64/base/from-int64-bytes/lib/main.js","../float64/base/from-words/lib/indices.js","../float64/base/from-words/lib/main.js","../float64/base/get-low-word/lib/low.js","../float64/base/get-low-word/lib/main.js","../float64/base/normalize/lib/assign.js","../float64/base/normalize/lib/main.js","../float64/base/normalize/lib/index.js","../float64/base/set-high-word/lib/high.js","../float64/base/set-high-word/lib/main.js","../float64/base/set-low-word/lib/low.js","../float64/base/set-low-word/lib/main.js","../float64/base/to-binary-string/lib/div2.js","../float64/base/to-binary-string/lib/mult2.js","../float64/base/to-int64-bytes/lib/main.js","../float64/base/to-int64-bytes/lib/assign.js","../float64/base/to-uint32/lib/main.js","../float64/base/to-int64-bytes/lib/index.js","../float64/base/lib/index.js","../float64/base/add/lib/main.js","../float64/base/add3/lib/main.js","../float64/base/add4/lib/main.js","../float64/base/add5/lib/main.js","../float64/base/div/lib/main.js","../float64/base/exponent/lib/main.js","../float64/base/from-binary-string/lib/main.js","../float64/base/from-binary-string/lib/todouble.js","../float64/base/identity/lib/main.js","../float64/base/mul/lib/main.js","../float64/base/signbit/lib/main.js","../float64/base/sub/lib/main.js","../float64/base/to-binary-string/lib/main.js","../float64/base/to-int32/lib/main.js","../float64/lib/index.js","../float64/reviver/lib/main.js","../float64/to-json/lib/main.js","../int32/base/mul/lib/main.js","../int32/base/mul/lib/index.js","../int32/base/mul/lib/polyfill.js","../int32/base/muldw/lib/assign.js","../int32/base/muldw/lib/main.js","../int32/base/to-uint32/lib/main.js","../int32/base/muldw/lib/index.js","../int32/base/lib/index.js","../int32/base/identity/lib/main.js","../int32/lib/index.js","../uint8/base/to-binary-string/lib/div2.js","../uint8/base/lib/index.js","../uint8/base/add/lib/main.js","../uint8/base/from-binary-string/lib/main.js","../uint8/base/identity/lib/main.js","../uint8/base/mul/lib/main.js","../uint8/base/sub/lib/main.js","../uint8/base/to-binary-string/lib/main.js","../uint8/lib/index.js","../uint16/base/to-binary-string/lib/div2.js","../uint16/base/lib/index.js","../uint16/base/add/lib/main.js","../uint16/base/from-binary-string/lib/main.js","../uint16/base/identity/lib/main.js","../uint16/base/mul/lib/main.js","../uint16/base/sub/lib/main.js","../uint16/base/to-binary-string/lib/main.js","../uint16/lib/index.js","../uint32/base/muldw/lib/assign.js","../uint32/base/muldw/lib/main.js","../uint32/base/muldw/lib/index.js","../uint32/base/rotl/lib/main.js","../uint32/base/rotr/lib/main.js","../uint32/base/to-binary-string/lib/div2.js","../uint32/base/lib/index.js","../uint32/base/add/lib/main.js","../uint32/base/from-binary-string/lib/main.js","../uint32/base/identity/lib/main.js","../uint32/base/mul/lib/main.js","../uint32/base/sub/lib/main.js","../uint32/base/to-binary-string/lib/main.js","../uint32/base/to-int32/lib/main.js","../uint32/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/to-float32\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport Uint32Array from '@stdlib/array/uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1.0 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {unsigned32} unsigned 32-bit integer\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\nfunction toWordf( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default toWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math/base/assert/is-nanf';\nimport SIGN_MASK from '@stdlib/constants/float32/sign-mask';\nimport toWordf from './../../../../float32/base/to-word';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// FUNCTIONS //\n\n/**\n* Converts an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number to a lexicographically ordered integer.\n*\n* @private\n* @param {unsigned32} word - unsigned 32-bit integer\n* @returns {integer} lexicographically ordered integer\n*/\nfunction monotoneKey( word ) {\n\tif ( word & SIGN_MASK ) { // x < 0\n\t\treturn ( ~word + 1 ); // two's-complement negation\n\t}\n\t// x >= 0\n\treturn ( word | SIGN_MASK ) >>> 0; // push +0 to just above -0\n}\n\n\n// MAIN //\n\n/**\n* Computes the number of representable single-precision floating-point values that separate two single-precision floating-point numbers along the real number line.\n*\n* ## Notes\n*\n* -   Adjacent single-precision floating-point numbers differ by 1 ulp (unit in the last place).\n* -   Signed zeros differ only in the sign bit but are considered numerically equal, and thus their ULP difference is 0.\n*\n* @param {number} x - first value\n* @param {number} y - second value\n* @returns {number} result\n*\n* @example\n* import EPS from '@stdlib/constants/float32/eps';\n*\n* var d = ulpdiff( 1.0, 1.0+EPS );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0+EPS, 1.0 );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0, 1.0+EPS+EPS );\n* // returns 2.0\n*\n* d = ulpdiff( 1.0, NaN );\n* // returns NaN\n*\n* d = ulpdiff( NaN, 1.0 );\n* // returns NaN\n*\n* d = ulpdiff( NaN, NaN );\n* // returns NaN\n*/\nfunction ulpdiff( x, y ) {\n\tvar wx;\n\tvar wy;\n\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Convert input values to unsigned 32-bit integers corresponding to the IEEE 754 binary representation of single-precision floating-point numbers:\n\twx = toWordf( x );\n\twy = toWordf( y );\n\n\t// Convert the words to lexicographically ordered integers:\n\twx = monotoneKey( wx );\n\twy = monotoneKey( wy );\n\n\t// Return a double as a result, which can exactly represent the ULP difference for all representable single-precision floating-point numbers:\n\treturn abs( wx - wy );\n}\n\n\n// EXPORTS //\n\nexport default ulpdiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isAlmostEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/assert/is-almost-equal}\n*/\nimport isAlmostEqual from './../../../../float32/base/assert/is-almost-equal';\nsetReadOnly( ns, 'isAlmostEqual', isAlmostEqual );\n\n/**\n* @name isSameValuef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/assert/is-same-value}\n*/\nimport isSameValuef from './../../../../float32/base/assert/is-same-value';\nsetReadOnly( ns, 'isSameValuef', isSameValuef );\n\n/**\n* @name isSameValueZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/assert/is-same-value-zero}\n*/\nimport isSameValueZerof from './../../../../float32/base/assert/is-same-value-zero';\nsetReadOnly( ns, 'isSameValueZerof', isSameValueZerof );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from './../../../../../float64/base/to-float32';\nimport ulpdiff from './../../../../../float32/base/ulp-difference';\n\n\n// MAIN //\n\n/**\n* Tests if two single-precision floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).\n*\n* ## Notes\n*\n* -   The function returns `false` if either input value is `NaN`.\n* -   The function does not distinguish between `-0` and `+0`, treating them as equal.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @param {number} maxULP - maximum allowed ULP difference\n* @returns {boolean} boolean indicating whether two single-precision floating-point numbers are approximately equal within a specified number of ULPs\n*\n* @example\n* import EPS from '@stdlib/constants/float32/eps';\n*\n* var bool = isAlmostEqualf( 1.0, 1.0+EPS, 1 );\n* // returns true\n*\n* bool = isAlmostEqualf( 1.0+EPS, 1.0, 1 );\n* // returns true\n*\n* bool = isAlmostEqualf( 1.0, 1.0+EPS+EPS, 1 );\n* // returns false\n*\n* bool = isAlmostEqualf( 1.0, 1.0+EPS, 0 );\n* // returns false\n*\n* bool = isAlmostEqualf( 0.0, -0.0, 0 );\n* // returns true\n*\n* bool = isAlmostEqualf( 1.0, NaN, 1 );\n* // returns false\n*\n* bool = isAlmostEqualf( NaN, NaN, 1 );\n* // returns false\n*/\nfunction isAlmostEqualf( a, b, maxULP ) {\n\treturn ulpdiff( f32( a ), f32( b ) ) <= maxULP;\n}\n\n\n// EXPORTS //\n\nexport default isAlmostEqualf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two single-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two single-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValuef( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValuef( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValuef( -0.0, 0.0 );\n* // returns false\n*\n* @example\n* var bool = isSameValuef( NaN, NaN );\n* // returns true\n*/\nfunction isSameValuef( a, b ) {\n\tif ( a === b ) {\n\t\tif ( a === 0.0 ) {\n\t\t\treturn 1.0 / a === 1.0 / b; // handles +-0\n\t\t}\n\t\treturn true;\n\t}\n\treturn ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nexport default isSameValuef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two single-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two single-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValueZerof( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( -0.0, 0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( NaN, NaN );\n* // returns true\n*/\nfunction isSameValueZerof( a, b ) {\n\treturn ( a === b ) || ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nexport default isSameValueZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float32Array from '@stdlib/array/float32';\n\n\n// VARIABLES //\n\nvar UINT32_VIEW = new Uint32Array( 1 );\nvar FLOAT32_VIEW = new Float32Array( UINT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @param {uinteger32} word - unsigned integer\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWordf( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\nfunction fromWordf( word ) {\n\tUINT32_VIEW[ 0 ] = word;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants/float32/smallest-normal';\nimport PINF from '@stdlib/constants/float32/pinf';\nimport NINF from '@stdlib/constants/float32/ninf';\nimport abs from '@stdlib/math/base/special/absf';\nimport toFloat32 from './../../../../float64/base/to-float32';\n\n\n// VARIABLES //\n\n// (1<<32)\nvar SCALAR = 8388608;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - single-precision floating-point number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var v = normalizef( toFloat32( 1.401e-45 ), [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants/float32/pinf';\n*\n* var v = normalizef( PINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants/float32/ninf';\n*\n* var v = normalizef( NINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x, out, stride, offset ) {\n\tif (\n\t\tx !== x ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {\n\t\tx = toFloat32( x*SCALAR );\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = -23;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalize from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {Array<number>} output array\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var v = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants/float32/pinf';\n*\n* var v = normalizef( PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants/float32/ninf';\n*\n* var v = normalizef( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x ) {\n\treturn normalize( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float32/base/normalize\n*\n* @example\n* import pow from '@stdlib/math/base/special/pow';\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n* import normalizef from '@stdlib/number/float32/base/normalize';\n*\n* var out = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2,exp) === toFloat32(1.401e-45) );\n* // returns true\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n* import normalizef from '@stdlib/number/float32/base/normalize';\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef.assign( toFloat32( 1.401e-45 ), out, 1, 0 );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2.0;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 149; // 127+22 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 24; // only 23 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default mult2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/add}\n*/\nimport add from './../../../float32/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float32/base/assert}\n*/\nimport assert from './../../../float32/base/assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name div\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/div}\n*/\nimport div from './../../../float32/base/div';\nsetReadOnly( ns, 'div', div );\n\n/**\n* @name exponentf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/exponent}\n*/\nimport exponentf from './../../../float32/base/exponent';\nsetReadOnly( ns, 'exponentf', exponentf );\n\n/**\n* @name fromBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-binary-string}\n*/\nimport fromBinaryStringf from './../../../float32/base/from-binary-string';\nsetReadOnly( ns, 'fromBinaryStringf', fromBinaryStringf );\n\n/**\n* @name fromWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-word}\n*/\nimport fromWordf from './../../../float32/base/from-word';\nsetReadOnly( ns, 'fromWordf', fromWordf );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/identity}\n*/\nimport identity from './../../../float32/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/mul}\n*/\nimport mul from './../../../float32/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name normalizef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/normalize}\n*/\nimport normalizef from './../../../float32/base/normalize';\nsetReadOnly( ns, 'normalizef', normalizef );\n\n/**\n* @name signbitf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/signbit}\n*/\nimport signbitf from './../../../float32/base/signbit';\nsetReadOnly( ns, 'signbitf', signbitf );\n\n/**\n* @name significandf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/significand}\n*/\nimport significandf from './../../../float32/base/significand';\nsetReadOnly( ns, 'significandf', significandf );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/sub}\n*/\nimport sub from './../../../float32/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name toBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-binary-string}\n*/\nimport toBinaryStringf from './../../../float32/base/to-binary-string';\nsetReadOnly( ns, 'toBinaryStringf', toBinaryStringf );\n\n/**\n* @name float32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-int32}\n*/\nimport float32ToInt32 from './../../../float32/base/to-int32';\nsetReadOnly( ns, 'float32ToInt32', float32ToInt32 );\n\n/**\n* @name float32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-uint32}\n*/\nimport float32ToUint32 from './../../../float32/base/to-uint32';\nsetReadOnly( ns, 'float32ToUint32', float32ToUint32 );\n\n/**\n* @name toWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-word}\n*/\nimport toWordf from './../../../float32/base/to-word';\nsetReadOnly( ns, 'toWordf', toWordf );\n\n/**\n* @name ulpdiff\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/ulp-difference}\n*/\nimport ulpdiff from './../../../float32/base/ulp-difference';\nsetReadOnly( ns, 'ulpdiff', ulpdiff );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from './../../../../float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the sum of two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} sum\n*\n* @example\n* var v = addf( -1.0, 5.0 );\n* // returns 4.0\n*\n* @example\n* var v = addf( 2.0, 5.0 );\n* // returns 7.0\n*\n* @example\n* var v = addf( 0.0, 5.0 );\n* // returns 5.0\n*\n* @example\n* var v = addf( -0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = addf( NaN, NaN );\n* // returns NaN\n*/\nfunction addf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) + float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default addf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from './../../../../float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Divides two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value (dividend)\n* @param {number} y - second input value (divisor)\n* @returns {number} result\n*\n* @example\n* var v = divf( -1.0, 5.0 );\n* // returns ~-0.2\n*\n* @example\n* var v = divf( 2.0, 5.0 );\n* // returns ~0.4\n*\n* @example\n* var v = divf( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = divf( -0.0, 5.0 );\n* // returns -0.0\n*\n* @example\n* var v = divf( NaN, NaN );\n* // returns NaN\n*/\nfunction divf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) / float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default divf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getWord from './../../../../float32/base/to-word';\nimport BIAS from '@stdlib/constants/float32/exponent-bias';\n\n\n// VARIABLES //\n\n// Exponent mask: 0 11111111 00000000000000000000000\nvar EXP_MASK = 0x7f800000; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer8} unbiased exponent\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var exp = exponentf( toFloat32( 3.14e34 ) ); // => 2**114 ~ 2.08e34\n* // returns 114\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var exp = exponentf( toFloat32( 3.14e-34 ) ); // => 2**-112 ~ 1.93e-34\n* // returns -112\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var exp = exponentf( toFloat32( -3.14 ) );\n* // returns 1\n*\n* @example\n* var exp = exponentf( 0.0 );\n* // returns -127\n*\n* @example\n* var exp = exponentf( NaN );\n* // returns 128\n*/\nfunction exponentf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\tw = ( w & EXP_MASK ) >>> 23;\n\n\t// Remove the bias and return:\n\treturn w - BIAS;\n}\n\n\n// EXPORTS //\n\nexport default exponentf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float32/pinf';\nimport NINF from '@stdlib/constants/float32/ninf';\nimport BIAS from '@stdlib/constants/float32/exponent-bias';\nimport pow from '@stdlib/math/base/special/pow';\nimport format from '@stdlib/string/format';\nimport toFloat32 from './../../../../float64/base/to-float32';\nimport toFrac from './tofrac.js';\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var bstr = '01000000100000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '01000000010010010000111111011011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* @example\n* var bstr = '11111111011011000011101000110011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var v =  fromBinaryStringf( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '10000000000000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns -0.0\n*/\nfunction fromBinaryStringf( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 32 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 32, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 9), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toFrac( bstr.substring( 9 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -(BIAS-1); // subnormals are special in that their exponent is constant\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn toFloat32( sign*frac*pow(2, exp) );\n}\n\n\n// EXPORTS //\n\nexport default fromBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Converts a float's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {BinaryString} frac - literal bit representation of a float's fraction bit sequence\n* @returns {number} fraction value\n*\n* @example\n* var v = toFrac( '10001100010111110011000' );\n* // returns ~0.548\n*\n* @example\n* var v = toFrac( '11110101000101011111111' );\n* // returns ~0.957\n*/\nfunction toFrac( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default toFrac;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for a single-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} input value\n*\n* @example\n* var v = identityf( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = identityf( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = identityf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = identityf( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = identityf( NaN );\n* // returns NaN\n*/\nfunction identityf( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identityf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from './../../../../float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = mulf( -1.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = mulf( 2.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = mulf( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = mulf( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = mulf( NaN, NaN );\n* // returns NaN\n*/\nfunction mulf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) * float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default mulf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toWord from './../../../../float32/base/to-word';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var bool = signbitf( toFloat32( 4.0 ) );\n* // returns false\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var bool = signbitf( toFloat32( -9.14e-34 ) );\n* // returns true\n*\n* @example\n* var bool = signbitf( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbitf( -0.0 );\n* // returns true\n*/\nfunction signbitf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the value's IEEE 754 binary representation:\n\tvar w = toWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( w >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nexport default signbitf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getWord from './../../../../float32/base/to-word';\n\n\n// VARIABLES //\n\n// Significand mask: 0 00000000 11111111111111111111111\nvar MASK = 0x007fffff; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the significand of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} significand\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111\n* // returns 4293751\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n* var s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101\n* // returns 5288021\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n* var s = significandf( toFloat32( -3.14 ) ); // => 10010001111010111000011\n* // returns 4781507\n*\n* @example\n* var s = significandf( 0.0 ); // => 00000000000000000000000\n* // returns 0\n*\n* @example\n* var s = significandf( NaN ); // => 10000000000000000000000\n* // returns 4194304\n*/\nfunction significandf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the significand bits:\n\treturn w & MASK;\n}\n\n\n// EXPORTS //\n\nexport default significandf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from './../../../../float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Subtracts two single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = subf( -1.0, 5.0 );\n* // returns -6.0\n*\n* @example\n* var v = subf( 2.0, 5.0 );\n* // returns -3.0\n*\n* @example\n* var v = subf( 0.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = subf( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = subf( NaN, NaN );\n* // returns NaN\n*/\nfunction subf( x, y ) {\n\treturn float64ToFloat32( float64ToFloat32( x ) - float64ToFloat32( y ) );\n}\n\n\n// EXPORTS //\n\nexport default subf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float32/pinf';\nimport NINF from '@stdlib/constants/float32/ninf';\nimport BIAS from '@stdlib/constants/float32/exponent-bias';\nimport abs from '@stdlib/math/base/special/abs';\nimport floor from '@stdlib/math/base/special/floor';\nimport rpad from '@stdlib/string/right-pad';\nimport lpad from '@stdlib/string/left-pad';\nimport repeat from '@stdlib/string/repeat';\nimport div2 from './div2.js';\nimport mult2 from './mult2.js';\n\n\n// VARIABLES //\n\n// TODO: consider placing in external modules\nvar NUM_SIGNIFICAND_BITS = 23;\nvar NUM_EXPONENT_BITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var str = toBinaryStringf( toFloat32( 4.0 ) );\n* // returns '01000000100000000000000000000000'\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var str = toBinaryStringf( toFloat32( 3.141592653589793 ) );\n* // returns '01000000010010010000111111011011'\n*\n* @example\n* var str = toBinaryStringf( toFloat32( -1e38 ) );\n* // returns '11111110100101100111011010011001'\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var str = toBinaryStringf( toFloat32( -3.14e-39 ) );\n* // returns '10000000001000100011000100001011'\n*\n* @example\n* import toFloat32 from '@stdlib/number/float64/base/to-float32';\n*\n* var str = toBinaryStringf( toFloat32( 1.4e-45 ) );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryStringf( 0.0 );\n* // returns '00000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( -0.0 );\n* // returns '10000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( NaN );\n* // returns '01111111110000000000000000000000'\n*\n* @example\n* import PINF from '@stdlib/constants/float32/pinf';\n*\n* var str = toBinaryStringf( PINF );\n* // returns '01111111100000000000000000000000'\n*\n* @example\n* import NINF from '@stdlib/constants/float32/ninf';\n*\n* var str = toBinaryStringf( NINF );\n* // returns '11111111100000000000000000000000'\n*/\nfunction toBinaryStringf( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || 1.0/x === NINF ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( x !== x ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 23 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nexport default toBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( 4294967295.0 ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( -3.14 ) );\n* // returns -3\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToInt32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default float32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( 4294967297.0 ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( -3.14 ) );\n* // returns 4294967293\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n* var y = float32ToUint32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nexport default float32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float32/base}\n*/\nimport base from './../../float32/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array/uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number/float64/base/to-words\n*\n* @example\n* import toWords from '@stdlib/number/float64/base/to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array/uint32';\n* import toWords from '@stdlib/number/float64/base/to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport SIGN_MASK from '@stdlib/constants/float64/high-word-sign-mask';\nimport { assign as toWords } from './../../../../float64/base/to-words';\nimport Uint32Array from '@stdlib/array/uint32';\n\n\n// VARIABLES //\n\nvar WX = new Uint32Array( 2 ); // WARNING: not thread safe\nvar WY = new Uint32Array( 2 );\nvar WZ = new Uint32Array( 2 );\n\n// 2^32:\nvar TWO_32 = 4294967296;\n\n\n// FUNCTIONS //\n\n/**\n* Converts the high and low words of a double-precision floating-point number to a lexicographically ordered integer.\n*\n* ## Notes\n*\n* -   This function mutates the input array.\n*\n* @private\n* @param {Array<integer>} words - high and low words\n* @returns {Array<integer>} input array\n*/\nfunction monotoneKey( words ) {\n\tif ( words[ 0 ]&SIGN_MASK ) { // x < 0\n\t\twords = negate( words ); // maps -∞ to 0\n\t} else { // x >= 0\n\t\twords[ 0 ] |= SIGN_MASK; // push +0 to just above -0\n\t}\n\treturn words;\n}\n\n/**\n* Perform two's-complement negation.\n*\n* ## Notes\n*\n* -   This function mutates the input array.\n*\n* @private\n* @param {Array<integer>} words - high and low words\n* @returns {Array<integer>} input array\n*/\nfunction negate( words ) {\n\twords[ 0 ] = ~words[ 0 ];\n\twords[ 1 ] = ~words[ 1 ];\n\twords[ 1 ] += 1;\n\n\t// Handle the carry into the high word...\n\tif ( words[ 1 ] === 0 ) {\n\t\twords[ 0 ] += 1;\n\t}\n\treturn words;\n}\n\n/**\n* Returns the ordering of two double-precision floating-point numbers according to their lexicographically ordered high and low words.\n*\n* @private\n* @param {Array<integer>} wa - high and low words for first value\n* @param {Array<integer>} wb - high and low words for second value\n* @returns {integer} relative ordering\n*/\nfunction compare( wa, wb ) {\n\tif ( wa[ 0 ] > wb[ 0 ] ) {\n\t\treturn 1;\n\t}\n\tif ( wa[ 0 ] < wb[ 0 ] ) {\n\t\treturn -1;\n\t}\n\tif ( wa[ 1 ] > wb[ 1 ] ) {\n\t\treturn 1;\n\t}\n\tif ( wa[ 1 ] < wb[ 1 ] ) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\n/**\n* Performs double-word subtraction.\n*\n* @private\n* @param {Array<integer>} wa - high and low words for first value\n* @param {Array<integer>} wb - high and low words for second value\n* @param {Array<integer>} wc - output array\n* @returns {Array<integer>} output array\n*/\nfunction subtract( wa, wb, wc ) {\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\n\tha = wa[ 0 ];\n\tla = wa[ 1 ];\n\thb = wb[ 0 ];\n\tlb = wb[ 1 ];\n\n\tif ( la >= lb ) {\n\t\twc[ 0 ] = ha - hb;\n\t\twc[ 1 ] = la - lb;\n\t} else {\n\t\twc[ 0 ] = ( ha - hb - 1 );      // wrap\n\t\twc[ 1 ] = ( la + TWO_32 ) - lb; // borrow\n\t}\n\treturn wc;\n}\n\n\n// MAIN //\n\n/**\n* Computes the number of representable double-precision floating-point values that separate two double-precision floating-point numbers along the real number line.\n*\n* ## Notes\n*\n* -   Adjacent double-precision floating-point numbers differ by 1 ulp (unit in the last place).\n* -   Signed zeros differ only in the sign bit but are considered numerically equal, and thus their ULP difference is 0.\n*\n* @param {number} x - first value\n* @param {number} y - second value\n* @returns {number} result\n*\n* @example\n* import EPS from '@stdlib/constants/float64/eps';\n*\n* var d = ulpdiff( 1.0, 1.0+EPS );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0+EPS, 1.0 );\n* // returns 1.0\n*\n* d = ulpdiff( 1.0, 1.0+EPS+EPS );\n* // returns 2.0\n*\n* d = ulpdiff( 1.0, NaN );\n* // returns NaN\n*\n* d = ulpdiff( NaN, 1.0 );\n* // returns NaN\n*\n* d = ulpdiff( NaN, NaN );\n* // returns NaN\n*/\nfunction ulpdiff( x, y ) {\n\tvar ord;\n\tvar wx;\n\tvar wy;\n\tvar wz;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Convert input values to high and low words:\n\twx = toWords( x, WX, 1, 0 );\n\twy = toWords( y, WY, 1, 0 );\n\n\t// Convert the values to lexicographically ordered integers:\n\twx = monotoneKey( wx );\n\twy = monotoneKey( wy );\n\n\t// Determine the relative ordering of the two values so that we always subtract the smaller value from the larger value and ensure that the result is always >= 0:\n\tord = compare( wx, wy );\n\n\t// Perform subtraction...\n\tif ( ord === 0 ) {\n\t\t// Identical encoding:\n\t\treturn 0;\n\t}\n\tif ( ord === 1 ) {\n\t\twz = subtract( wx, wy, WZ );\n\t} else { // ord === -1\n\t\twz = subtract( wy, wx, WZ );\n\t}\n\t// Return a double as a result, which is fine for ≤2^53 ulps:\n\treturn ( wz[ 0 ]*TWO_32 ) + wz[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default ulpdiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isAlmostEqual\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/assert/is-almost-equal}\n*/\nimport isAlmostEqual from './../../../../float64/base/assert/is-almost-equal';\nsetReadOnly( ns, 'isAlmostEqual', isAlmostEqual );\n\n/**\n* @name isSameValue\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/assert/is-same-value}\n*/\nimport isSameValue from './../../../../float64/base/assert/is-same-value';\nsetReadOnly( ns, 'isSameValue', isSameValue );\n\n/**\n* @name isSameValueZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/assert/is-same-value-zero}\n*/\nimport isSameValueZero from './../../../../float64/base/assert/is-same-value-zero';\nsetReadOnly( ns, 'isSameValueZero', isSameValueZero );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ulpdiff from './../../../../../float64/base/ulp-difference';\n\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).\n*\n* ## Notes\n*\n* -   The function returns `false` if either input value is `NaN`.\n* -   The function does not distinguish between `-0` and `+0`, treating them as equal.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @param {number} maxULP - maximum allowed ULP difference\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are approximately equal within a specified number of ULPs\n*\n* @example\n* import EPS from '@stdlib/constants/float64/eps';\n*\n* var bool = isAlmostEqual( 1.0, 1.0+EPS, 1 );\n* // returns true\n*\n* bool = isAlmostEqual( 1.0+EPS, 1.0, 1 );\n* // returns true\n*\n* bool = isAlmostEqual( 1.0, 1.0+EPS+EPS, 1 );\n* // returns false\n*\n* bool = isAlmostEqual( 1.0, 1.0+EPS, 0 );\n* // returns false\n*\n* bool = isAlmostEqual( 0.0, -0.0, 0 );\n* // returns true\n*\n* bool = isAlmostEqual( 1.0, NaN, 1 );\n* // returns false\n*\n* bool = isAlmostEqual( NaN, NaN, 1 );\n* // returns false\n*/\nfunction isAlmostEqual( a, b, maxULP ) {\n\treturn ulpdiff( a, b ) <= maxULP;\n}\n\n\n// EXPORTS //\n\nexport default isAlmostEqual;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValue( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValue( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValue( -0.0, 0.0 );\n* // returns false\n*\n* @example\n* var bool = isSameValue( NaN, NaN );\n* // returns true\n*/\nfunction isSameValue( a, b ) {\n\tif ( a === b ) {\n\t\tif ( a === 0.0 ) {\n\t\t\treturn 1.0 / a === 1.0 / b; // handles +-0\n\t\t}\n\t\treturn true;\n\t}\n\treturn ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nexport default isSameValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValueZero( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( -0.0, 0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( NaN, NaN );\n* // returns true\n*/\nfunction isSameValueZero( a, b ) {\n\treturn ( a === b ) || ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nexport default isSameValueZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport Uint8Array from '@stdlib/array/uint8';\nimport DataView from '@stdlib/array/dataview';\n\n\n// VARIABLES //\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Initialize a workspace:\nvar WORKSPACE = new Uint8Array( 8 );\n\n\n// MAIN //\n\n/**\n* Converts a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* ## Notes\n*\n* -   The function assumes host byte order (endianness).\n*\n* @param {Uint8Array} bytes - byte array\n* @param {integer} stride - stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {number} double-precision floating-point number\n*\n* @example\n* import Uint8Array from '@stdlib/array/uint8';\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64Bytes( bytes, 1, 0 );\n* // returns -1.0\n*/\nfunction fromInt64Bytes( bytes, stride, offset ) {\n\tvar view;\n\tvar hi;\n\tvar lo;\n\tvar b;\n\tvar i;\n\n\tif ( stride === 1 ) { // contiguous\n\t\tb = bytes;\n\t} else { // non-contiguous\n\t\tb = WORKSPACE;\n\t\tfor ( i = 0; i < 8; i++ ) {\n\t\t\tb[ i ] = bytes[ offset ];\n\t\t\toffset += stride;\n\t\t}\n\t\toffset = 0;\n\t}\n\tview = new DataView( b.buffer, b.byteOffset, b.byteLength );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tlo = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\thi = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t} else {\n\t\thi = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\tlo = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t}\n\tif ( lo < 0 ) {\n\t\tlo += TWO_32;\n\t}\n\treturn ( hi*TWO_32 ) + lo;\n}\n\n\n// EXPORTS //\n\nexport default fromInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nexport default getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants/float64/smallest-normal';\nimport isInfinite from '@stdlib/math/base/assert/is-infinite';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math/base/special/pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants/float64/pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants/float64/ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math/base/special/pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants/float64/pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants/float64/ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float64/base/normalize\n*\n* @example\n* import pow from '@stdlib/math/base/special/pow';\n* import normalize from '@stdlib/number/float64/base/normalize';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n* import normalize from '@stdlib/number/float64/base/normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants/float64/pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert/is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array/uint32';\nimport Float64Array from '@stdlib/array/float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* import PINF from '@stdlib/constants/float64/pinf';\n* import NINF from '@stdlib/constants/float64/ninf';\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {number} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 54; // only 53 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default mult2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport Uint8Array from '@stdlib/array/uint8';\nimport DataView from '@stdlib/array/dataview';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @returns {Uint8Array} byte array\n*\n* @example\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x ) {\n\tvar bytes;\n\tvar view;\n\tvar hi;\n\tvar lo;\n\n\tbytes = new Uint8Array( 8 );\n\tif ( x === 0 ) {\n\t\treturn bytes;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tview = new DataView( bytes.buffer );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tview.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tview.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\treturn bytes;\n}\n\n\n// EXPORTS //\n\nexport default float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport Uint8Array from '@stdlib/array/uint8';\nimport DataView from '@stdlib/array/dataview';\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Byte array workspace:\nvar BYTES = new Uint8Array( 8 );\nvar VIEW = new DataView( BYTES.buffer );\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint8Array from '@stdlib/array/uint8';\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x, out, stride, offset ) {\n\tvar hi;\n\tvar lo;\n\tvar i;\n\n\tif ( x === 0 ) {\n\t\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\t\tout[ offset ] = 0;\n\t\t\toffset += stride;\n\t\t}\n\t\treturn out;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tVIEW.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tVIEW.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\tout[ offset ] = BYTES[ i ];\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var y = float64ToUint32( 4294967297.0 );\n* // returns 1\n*\n* @example\n* var y = float64ToUint32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToUint32( -3.14 );\n* // returns 4294967293\n*\n* @example\n* var y = float64ToUint32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( -Infinity );\n* // returns 0\n*/\nfunction float64ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nexport default float64ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* @module @stdlib/number/float64/base/to-int64-bytes\n*\n* @example\n* import float64ToInt64Bytes from '@stdlib/number/float64/base/to-int64-bytes';\n*\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*\n* @example\n* import Uint8Array from '@stdlib/array/uint8';\n* import float64ToInt64Bytes from '@stdlib/number/float64/base/to-int64-bytes';\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/add}\n*/\nimport add from './../../../float64/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name add3\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/add3}\n*/\nimport add3 from './../../../float64/base/add3';\nsetReadOnly( ns, 'add3', add3 );\n\n/**\n* @name add4\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/add4}\n*/\nimport add4 from './../../../float64/base/add4';\nsetReadOnly( ns, 'add4', add4 );\n\n/**\n* @name add5\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/add5}\n*/\nimport add5 from './../../../float64/base/add5';\nsetReadOnly( ns, 'add5', add5 );\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base/assert}\n*/\nimport assert from './../../../float64/base/assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name div\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/div}\n*/\nimport div from './../../../float64/base/div';\nsetReadOnly( ns, 'div', div );\n\n/**\n* @name exponent\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/exponent}\n*/\nimport exponent from './../../../float64/base/exponent';\nsetReadOnly( ns, 'exponent', exponent );\n\n/**\n* @name fromBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-binary-string}\n*/\nimport fromBinaryString from './../../../float64/base/from-binary-string';\nsetReadOnly( ns, 'fromBinaryString', fromBinaryString );\n\n/**\n* @name fromInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-int64-bytes}\n*/\nimport fromInt64Bytes from './../../../float64/base/from-int64-bytes';\nsetReadOnly( ns, 'fromInt64Bytes', fromInt64Bytes );\n\n/**\n* @name fromWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-words}\n*/\nimport fromWords from './../../../float64/base/from-words';\nsetReadOnly( ns, 'fromWords', fromWords );\n\n/**\n* @name getHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-high-word}\n*/\nimport getHighWord from './../../../float64/base/get-high-word';\nsetReadOnly( ns, 'getHighWord', getHighWord );\n\n/**\n* @name getLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-low-word}\n*/\nimport getLowWord from './../../../float64/base/get-low-word';\nsetReadOnly( ns, 'getLowWord', getLowWord );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/identity}\n*/\nimport identity from './../../../float64/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/mul}\n*/\nimport mul from './../../../float64/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name normalize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/normalize}\n*/\nimport normalize from './../../../float64/base/normalize';\nsetReadOnly( ns, 'normalize', normalize );\n\n/**\n* @name setHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-high-word}\n*/\nimport setHighWord from './../../../float64/base/set-high-word';\nsetReadOnly( ns, 'setHighWord', setHighWord );\n\n/**\n* @name setLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-low-word}\n*/\nimport setLowWord from './../../../float64/base/set-low-word';\nsetReadOnly( ns, 'setLowWord', setLowWord );\n\n/**\n* @name signbit\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/signbit}\n*/\nimport signbit from './../../../float64/base/signbit';\nsetReadOnly( ns, 'signbit', signbit );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/sub}\n*/\nimport sub from './../../../float64/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name toBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-binary-string}\n*/\nimport toBinaryString from './../../../float64/base/to-binary-string';\nsetReadOnly( ns, 'toBinaryString', toBinaryString );\n\n/**\n* @name float64ToFloat32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-float32}\n*/\nimport float64ToFloat32 from './../../../float64/base/to-float32';\nsetReadOnly( ns, 'float64ToFloat32', float64ToFloat32 );\n\n/**\n* @name float64ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int32}\n*/\nimport float64ToInt32 from './../../../float64/base/to-int32';\nsetReadOnly( ns, 'float64ToInt32', float64ToInt32 );\n\n/**\n* @name float64ToInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int64-bytes}\n*/\nimport float64ToInt64Bytes from './../../../float64/base/to-int64-bytes';\nsetReadOnly( ns, 'float64ToInt64Bytes', float64ToInt64Bytes );\n\n/**\n* @name float64ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-uint32}\n*/\nimport float64ToUint32 from './../../../float64/base/to-uint32';\nsetReadOnly( ns, 'float64ToUint32', float64ToUint32 );\n\n/**\n* @name toWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-words}\n*/\nimport toWords from './../../../float64/base/to-words';\nsetReadOnly( ns, 'toWords', toWords );\n\n/**\n* @name ulpdiff\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/ulp-difference}\n*/\nimport ulpdiff from './../../../float64/base/ulp-difference';\nsetReadOnly( ns, 'ulpdiff', ulpdiff );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} sum\n*\n* @example\n* var v = add( -1.0, 5.0 );\n* // returns 4.0\n*\n* @example\n* var v = add( 2.0, 5.0 );\n* // returns 7.0\n*\n* @example\n* var v = add( 0.0, 5.0 );\n* // returns 5.0\n*\n* @example\n* var v = add( -0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add( NaN, NaN );\n* // returns NaN\n*/\nfunction add( x, y ) {\n\treturn x + y;\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of three double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @returns {number} sum\n*\n* @example\n* var v = add3( -1.0, 5.0, 2.0 );\n* // returns 6.0\n*\n* @example\n* var v = add3( 2.0, 5.0, 2.0 );\n* // returns 9.0\n*\n* @example\n* var v = add3( 0.0, 5.0, 2.0 );\n* // returns 7.0\n*\n* @example\n* var v = add3( -0.0, 0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add3( NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add3( x, y, z ) {\n\treturn x + y + z;\n}\n\n\n// EXPORTS //\n\nexport default add3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of four double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @param {number} w - fourth input value\n* @returns {number} sum\n*\n* @example\n* var v = add4( -1.0, 5.0, 2.0, -3.0 );\n* // returns 3.0\n*\n* @example\n* var v = add4( 2.0, 5.0, 2.0, -3.0 );\n* // returns 6.0\n*\n* @example\n* var v = add4( 0.0, 5.0, 2.0, -3.0 );\n* // returns 4.0\n*\n* @example\n* var v = add4( -0.0, 0.0, -0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add4( NaN, NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add4( x, y, z, w ) {\n\treturn x + y + z + w;\n}\n\n\n// EXPORTS //\n\nexport default add4;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of five double-precision floating-point numbers.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @param {number} z - third input value\n* @param {number} w - fourth input value\n* @param {number} u - fifth input value\n* @returns {number} sum\n*\n* @example\n* var v = add5( -1.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 7.0\n*\n* @example\n* var v = add5( 2.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 10.0\n*\n* @example\n* var v = add5( 0.0, 5.0, 2.0, -3.0, 4.0 );\n* // returns 8.0\n*\n* @example\n* var v = add5( -0.0, 0.0, -0.0, -0.0, -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = add5( NaN, NaN, NaN, NaN, NaN );\n* // returns NaN\n*/\nfunction add5( x, y, z, w, u ) {\n\treturn x + y + z + w + u;\n}\n\n\n// EXPORTS //\n\nexport default add5;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Divides two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value (dividend)\n* @param {number} y - second input value (divisor)\n* @returns {number} result\n*\n* @example\n* var v = div( -1.0, 5.0 );\n* // returns -0.2\n*\n* @example\n* var v = div( 2.0, 5.0 );\n* // returns 0.4\n*\n* @example\n* var v = div( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = div( -0.0, 5.0 );\n* // returns -0.0\n*\n* @example\n* var v = div( NaN, NaN );\n* // returns NaN\n*/\nfunction div( x, y ) {\n\treturn x / y;\n}\n\n\n// EXPORTS //\n\nexport default div;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from './../../../../float64/base/get-high-word';\nimport EXP_MASK from '@stdlib/constants/float64/high-word-exponent-mask';\nimport BIAS from '@stdlib/constants/float64/exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport BIAS from '@stdlib/constants/float64/exponent-bias';\nimport pow from '@stdlib/math/base/special/pow';\nimport format from '@stdlib/string/format';\nimport toDouble from './todouble.js';\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `64`\n* @returns {number} double\n*\n* @example\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* var val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* @example\n* var bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* var val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* var val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* var val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* @example\n* var bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns NaN\n*\n* @example\n* var bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* @example\n* var bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\nfunction fromBinaryString( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 64 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 64, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 12), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toDouble( bstr.substring( 12 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -1022; // (1-BIAS); subnormals are special\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn sign * frac * pow( 2.0, exp );\n}\n\n\n// EXPORTS //\n\nexport default fromBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Converts a double's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {string} frac - literal bit representation of a double's fraction bit sequence\n* @returns {number} fraction)\n*/\nfunction toDouble( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default toDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} input value\n*\n* @example\n* var v = identity( -1.0 );\n* // returns -1.0\n*\n* @example\n* var v = identity( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = identity( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = identity( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = identity( NaN );\n* // returns NaN\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = mul( -1.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = mul( 2.0, 5.0 );\n* // returns 10.0\n*\n* @example\n* var v = mul( 0.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var v = mul( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = mul( NaN, NaN );\n* // returns NaN\n*/\nfunction mul( x, y ) {\n\treturn x * y;\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from './../../../../float64/base/get-high-word';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nexport default signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Subtracts two double-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - first input value\n* @param {number} y - second input value\n* @returns {number} result\n*\n* @example\n* var v = sub( -1.0, 5.0 );\n* // returns -6.0\n*\n* @example\n* var v = sub( 2.0, 5.0 );\n* // returns -3.0\n*\n* @example\n* var v = sub( 0.0, 5.0 );\n* // returns -5.0\n*\n* @example\n* var v = sub( -0.0, 0.0 );\n* // returns -0.0\n*\n* @example\n* var v = sub( NaN, NaN );\n* // returns NaN\n*/\nfunction sub( x, y ) {\n\treturn x - y;\n}\n\n\n// EXPORTS //\n\nexport default sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport BIAS from '@stdlib/constants/float64/exponent-bias';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport abs from '@stdlib/math/base/special/abs';\nimport floor from '@stdlib/math/base/special/floor';\nimport rpad from '@stdlib/string/right-pad';\nimport lpad from '@stdlib/string/left-pad';\nimport repeat from '@stdlib/string/repeat';\nimport div2 from './div2.js';\nimport mult2 from './mult2.js';\n\n\n// VARIABLES //\n\n// TODO: consider moving to external constants\nvar NUM_EXPONENT_BITS = 11;\nvar NUM_SIGNIFICAND_BITS = 52;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var str = toBinaryString( 4.0 );\n* // returns '0100000000010000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( 3.141592653589793 );\n* // returns '0100000000001001001000011111101101010100010001000010110100011000'\n*\n* @example\n* var str = toBinaryString( -1.0e308 );\n* // returns '1111111111100001110011001111001110000101111010111100100010100000'\n*\n* @example\n* var str = toBinaryString( -3.14e-320 );\n* // returns '1000000000000000000000000000000000000000000000000001100011010011'\n*\n* @example\n* var str = toBinaryString( 5.0e-324 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryString( 0.0 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -0.0 );\n* // returns '1000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( NaN );\n* // returns '0111111111111000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( Infinity );\n* // returns '0111111111110000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -Infinity );\n* // returns '1111111111110000000000000000000000000000000000000000000000000000'\n*/\nfunction toBinaryString( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || isNegativeZero( x ) ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0 ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 52 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nexport default toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var y = float64ToInt32( 4294967295.0 );\n* // returns -1\n*\n* @example\n* var y = float64ToInt32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToInt32( -3.14 );\n* // returns -3\n*\n* @example\n* var y = float64ToInt32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( -Infinity );\n* // returns 0\n*/\nfunction float64ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default float64ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base}\n*/\nimport base from './../../float64/base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name reviver\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/reviver}\n*/\nimport reviver from './../../float64/reviver';\nsetReadOnly( ns, 'reviver', reviver );\n\n/**\n* @name toJSON\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/to-json}\n*/\nimport toJSON from './../../float64/to-json';\nsetReadOnly( ns, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {*} revived value\n*\n* @example\n* import parseJSON from '@stdlib/utils/parse-json';\n*\n* var str = '{\"type\":\"float64\",\"value\":\"NaN\"}';\n*\n* var v = parseJSON( str, reviver );\n* // returns NaN\n*/\nfunction reviver( key, value ) {\n\tif (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\tvalue.type === 'float64'\n\t) {\n\t\tif ( value.value === 'NaN' ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( value.value === '+Infinity' ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( value.value === '-Infinity' ) {\n\t\t\treturn NINF;\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default reviver;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of a number.\n*\n* @param {number} x - input value\n* @throws {TypeError} must provide a number\n* @returns {Object} JSON representation\n*\n* @example\n* var json = number2json( NaN );\n* // returns { 'type': 'float64', 'value': 'NaN' }\n*/\nfunction number2json( x ) {\n\tif ( typeof x !== 'number' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', x ) );\n\t}\n\tif ( x !== x ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': 'NaN'\n\t\t};\n\t}\n\tif ( x === PINF ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': '+Infinity'\n\t\t};\n\t}\n\tif ( x === NINF ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': '-Infinity'\n\t\t};\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default number2json;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar imul = ( typeof Math.imul === 'function' ) ? Math.imul : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default imul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform C-like multiplication of two signed 32-bit integers.\n*\n* @module @stdlib/number/int32/base/mul\n*\n* @example\n* import imul from '@stdlib/number/int32/base/mul';\n*\n* var v = imul( -10|0, 4|0 );\n* // returns -40\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( typeof builtin === 'function' ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs C-like multiplication of two signed 32-bit integers.\n*\n* ## Method\n*\n* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words\n*\n*     ```tex\n*     a = w_h*2^{16} + w_l\n*     ```\n*\n*     where \\\\( w_h \\\\) is the most significant 16 bits and \\\\( w_l \\\\) is the least significant 16 bits. For example, consider the maximum signed 32-bit integer \\\\( 2^{31}-1 \\\\)\n*\n*     ```binarystring\n*     01111111111111111111111111111111\n*     ```\n*\n*     The 16-bit high word is then\n*\n*     ```binarystring\n*     0111111111111111\n*     ```\n*\n*     and the 16-bit low word\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     If we cast the high word to 32-bit precision and multiply by \\\\( 2^{16} \\\\) (equivalent to a 16-bit left shift), then the bit sequence is\n*\n*     ```binarystring\n*     01111111111111110000000000000000\n*     ```\n*\n*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is\n*\n*     ```binarystring\n*     00000000000000001111111111111111\n*     ```\n*\n*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\\\( 2^{31}-1 \\\\).\n*\n* -   Accordingly, the multiplication of two 32-bit integers can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     a \\cdot b &= ( a_h \\cdot 2^{16} + a_l) \\cdot ( b_h \\cdot 2^{16} + b_l) \\\\\n*           &= a_l \\cdot b_l + a_h \\cdot b_l \\cdot 2^{16} + a_l \\cdot b_h \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32} \\\\\n*           &= a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32}\n*     \\end{align*}\n*     ```\n*\n* -   We note that multiplying (dividing) an integer by \\\\( 2^n \\\\) is equivalent to performing a left (right) shift of \\\\( n \\\\) bits.\n*\n* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\\\( 2^{32} \\\\). Stated another way, we only care about the low word of a 64-bit result.\n*\n* -   Accordingly, the last term, being evenly divisible by \\\\( 2^{32} \\\\), drops from the equation leaving the remaining two terms as the remainder.\n*\n*     ```tex\n*     a \\cdot b = a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) << 16\n*     ```\n*\n* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to \"overflow\". However, we can disregard (`>>>0`) overflow bits due to modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.\n*\n* @param {integer32} a - integer\n* @param {integer32} b - integer\n* @returns {integer32} product\n*\n* @example\n* var v = imul( -10|0, 4|0 );\n* // returns -40\n*/\nfunction imul( a, b ) {\n\tvar lbits;\n\tvar mbits;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\n\ta |= 0; // asm type annotation\n\tb |= 0; // asm type annotation\n\n\t// Isolate the most significant 16-bits:\n\tha = ( a>>>16 )>>>0; // asm type annotation\n\thb = ( b>>>16 )>>>0; // asm type annotation\n\n\t// Isolate the least significant 16-bits:\n\tla = ( a&LOW_WORD_MASK )>>>0; // asm type annotation\n\tlb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation\n\n\t// Shift by zero (`>>>0`) sets the sign on the high part of the low word (i.e., \"mid-bits\"):\n\tlbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible\n\tmbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow\n\n\t// The final `|0` converts from an \"unsigned integer\" (possible integer overflow during sum) to a signed integer:\n\treturn ( lbits + mbits )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default imul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = imuldw( 0xAAAAAAAA, 0x55555555, [ 0, 0 ], 1, 0 );\n* // returns [ -477218589, 1908874354 ]\n*/\nfunction imuldw( a, b, out, stride, offset ) {\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar t;\n\tvar k;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\ta |= 0; // asm type annotation\n\tb |= 0; // asm type annotation\n\n\tha = ( a >> 16 ) | 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >> 16 ) | 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >> 16 ) >>> 0;\n\n\tout[ offset ] = ( ( ha*hb ) + w1 + k ) | 0; // compute the higher 32 bits and cast to a signed 32-bit integer\n\tout[ offset + stride ] = ( ( t << 16 ) + w3 ) | 0; // compute the lower 32 bits and cast to a signed 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default imuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {Array<number>} output array\n*\n* @example\n* var v = imuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ -477218589, 1908874354 ]\n*/\nfunction imuldw( a, b ) {\n\treturn fcn( a, b, [ 0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default imuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a signed 32-bit integer to an unsigned 32-bit integer.\n*\n* @param {integer32} x - signed 32-bit integer\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* import float64ToInt32 from '@stdlib/number/float64/base/to-int32';\n*\n* var y = int32ToUint32( float64ToInt32( -1.0 ) );\n* // returns 4294967295\n*\n* @example\n* import float64ToInt32 from '@stdlib/number/float64/base/to-int32';\n*\n* var y = int32ToUint32( float64ToInt32( 3 ) );\n* // returns 3\n*/\nfunction int32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nexport default int32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two signed 32-bit integers and return an array of two signed 32-bit integers which represents the signed 64-bit integer product.\n*\n* @module @stdlib/number/int32/base/muldw\n*\n* @example\n* import imuldw from '@stdlib/number/int32/base/muldw';\n*\n* var v = imuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ -477218589, 1908874354 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/identity}\n*/\nimport identity from './../../../int32/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/mul}\n*/\nimport mul from './../../../int32/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name muldw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/muldw}\n*/\nimport muldw from './../../../int32/base/muldw';\nsetReadOnly( ns, 'muldw', muldw );\n\n/**\n* @name int32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/to-uint32}\n*/\nimport int32ToUint32 from './../../../int32/base/to-uint32';\nsetReadOnly( ns, 'int32ToUint32', int32ToUint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for a signed 32-bit integer `x`.\n*\n* @param {integer} x - input value\n* @returns {integer} input value\n*\n* @example\n* var v = identity( 1 );\n* // returns 1\n*\n* @example\n* var v = identity( 2 );\n* // returns 2\n*\n* @example\n* var v = identity( 0 );\n* // returns 0\n*\n* @example\n* var v = identity( 2147483647 );\n* // returns 2147483647\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/int32/base}\n*/\nimport base from './../../int32/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/add}\n*/\nimport add from './../../../uint8/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name fromBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/from-binary-string}\n*/\nimport fromBinaryStringUint8 from './../../../uint8/base/from-binary-string';\nsetReadOnly( ns, 'fromBinaryStringUint8', fromBinaryStringUint8 );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/identity}\n*/\nimport identity from './../../../uint8/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/mul}\n*/\nimport mul from './../../../uint8/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/sub}\n*/\nimport sub from './../../../uint8/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name toBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/to-binary-string}\n*/\nimport toBinaryStringUint8 from './../../../uint8/base/to-binary-string';\nsetReadOnly( ns, 'toBinaryStringUint8', toBinaryStringUint8 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 0xFF = 255 => 000000000000000000000000 11111111\nvar MASK = 0xFF;\n\n\n// MAIN //\n\n/**\n* Computes the sum of two unsigned 8-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} sum\n*\n* @example\n* var v = add( 1, 5 );\n* // returns 6\n*\n* @example\n* var v = add( 2, 5 );\n* // returns 7\n*\n* @example\n* var v = add( 0, 5 );\n* // returns 5\n*/\nfunction add( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 8 bits:\n\treturn ( (x|0) + (y|0) ) & MASK;\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 8-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `8`\n* @returns {uinteger8} unsigned 8-bit integer\n*\n* @example\n* var bstr = '01010101';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 85\n*\n* @example\n* var bstr = '00000000';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000010';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 255\n*/\nfunction fromBinaryStringUint8( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default fromBinaryStringUint8;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for an unsigned 8-bit integer `x`.\n*\n* @param {uinteger} x - input value\n* @returns {uinteger} input value\n*\n* @example\n* var v = identity( 1 );\n* // returns 1\n*\n* @example\n* var v = identity( 2 );\n* // returns 2\n*\n* @example\n* var v = identity( 0 );\n* // returns 0\n*\n* @example\n* var v = identity( 255 );\n* // returns 255\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 0xFF = 255 => 000000000000000000000000 11111111\nvar MASK = 0xFF;\n\n\n// MAIN //\n\n/**\n* Multiplies two unsigned 8-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} result\n*\n* @example\n* var v = mul( 5, 1 );\n* // returns 5\n*\n* @example\n* var v = mul( 5, 2 );\n* // returns 10\n*\n* @example\n* var v = mul( 5, 0 );\n* // returns 0\n*/\nfunction mul( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 8 bits:\n\treturn ( (x|0) * (y|0) ) & MASK; // 255^2 = 65025, so no risk of int32 overflow\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 0xFF = 255 => 000000000000000000000000 11111111\nvar MASK = 0xFF;\n\n\n// MAIN //\n\n/**\n* Subtracts two unsigned 8-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} result\n*\n* @example\n* var v = sub( 5, 1 );\n* // returns 4\n*\n* @example\n* var v = sub( 5, 2 );\n* // returns 3\n*\n* @example\n* var v = sub( 5, 0 );\n* // returns 5\n*/\nfunction sub( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 8 bits:\n\treturn ( (x|0) - (y|0) ) & MASK;\n}\n\n\n// EXPORTS //\n\nexport default sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lpad from '@stdlib/string/left-pad';\nimport div2 from './div2.js';\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 8-bit integer.\n*\n* @param {uinteger8} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint8Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000001'\n*\n* @example\n* var a = new Uint8Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000100'\n*\n* @example\n* var a = new Uint8Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 8 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nexport default toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint8/base}\n*/\nimport base from './../../uint8/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/add}\n*/\nimport add from './../../../uint16/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name fromBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/from-binary-string}\n*/\nimport fromBinaryStringUint16 from './../../../uint16/base/from-binary-string';\nsetReadOnly( ns, 'fromBinaryStringUint16', fromBinaryStringUint16 );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/identity}\n*/\nimport identity from './../../../uint16/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/mul}\n*/\nimport mul from './../../../uint16/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/sub}\n*/\nimport sub from './../../../uint16/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name toBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/to-binary-string}\n*/\nimport toBinaryStringUint16 from './../../../uint16/base/to-binary-string';\nsetReadOnly( ns, 'toBinaryStringUint16', toBinaryStringUint16 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 0xFFFF = 65535 => 0000000000000000 11111111 11111111\nvar MASK = 0xFFFF;\n\n\n// MAIN //\n\n/**\n* Computes the sum of two unsigned 16-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} sum\n*\n* @example\n* var v = add( 1, 5 );\n* // returns 6\n*\n* @example\n* var v = add( 2, 5 );\n* // returns 7\n*\n* @example\n* var v = add( 0, 5 );\n* // returns 5\n*/\nfunction add( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 16 bits:\n\treturn ( (x|0) + (y|0) ) & MASK;\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 16-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `16`\n* @returns {uinteger16} unsigned 16-bit integer\n*\n* @example\n* var bstr = '0101010101010101';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 21845\n*\n* @example\n* var bstr = '0000000000000000';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '0000000000000010';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '1111111111111111';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 65535\n*/\nfunction fromBinaryStringUint16( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default fromBinaryStringUint16;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for an unsigned 16-bit integer `x`.\n*\n* @param {uinteger} x - input value\n* @returns {uinteger} input value\n*\n* @example\n* var v = identity( 1 );\n* // returns 1\n*\n* @example\n* var v = identity( 2 );\n* // returns 2\n*\n* @example\n* var v = identity( 0 );\n* // returns 0\n*\n* @example\n* var v = identity( 65535 );\n* // returns 65535\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport imul from './../../../../int32/base/mul';\n\n\n// VARIABLES //\n\n// 0xFFFF = 65535 => 0000000000000000 11111111 11111111\nvar MASK = 0xFFFF;\n\n\n// MAIN //\n\n/**\n* Multiplies two unsigned 16-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} result\n*\n* @example\n* var v = mul( 5, 1 );\n* // returns 5\n*\n* @example\n* var v = mul( 5, 2 );\n* // returns 10\n*\n* @example\n* var v = mul( 5, 0 );\n* // returns 0\n*/\nfunction mul( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 16 bits:\n\treturn imul( x|0, y|0 ) & MASK; // 65535^2 = 42949365225, which overflows signed 32-bit integer; however, by using `imul`, we emulate C-like two's complement wraparound semantics, which allows us to just keep the last 16-bits\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 0xFFFF = 65535 => 00000000000000000 11111111 11111111\nvar MASK = 0xFFFF;\n\n\n// MAIN //\n\n/**\n* Subtracts two unsigned 16-bit integers `x` and `y`.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} result\n*\n* @example\n* var v = sub( 5, 1 );\n* // returns 4\n*\n* @example\n* var v = sub( 5, 2 );\n* // returns 3\n*\n* @example\n* var v = sub( 5, 0 );\n* // returns 5\n*/\nfunction sub( x, y ) {\n\t// Cast `x` and `y` to signed 32-bit integers and apply a mask which keeps only the lowest 16 bits:\n\treturn ( (x|0) - (y|0) ) & MASK;\n}\n\n\n// EXPORTS //\n\nexport default sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lpad from '@stdlib/string/left-pad';\nimport div2 from './div2.js';\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @param {uinteger16} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint16Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* @example\n* var a = new Uint16Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000100'\n*\n* @example\n* var a = new Uint16Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 16 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nexport default toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint16/base}\n*/\nimport base from './../../uint16/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math/base/assert/is-nan';\n\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = [ 0, 0 ];\n* var v = umuldw( 0xAAAAAAAA, 0x55555555, out, 1, 0 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw(a, b, out, stride, offset ) {\n\tvar w1;\n\tvar w2;\n\tvar w3;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\tvar t;\n\tvar k;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\tha = ( a >>> 16 ) >>> 0;\n\tla = ( a & LOW_WORD_MASK ) >>> 0;\n\n\thb = ( b >>> 16 ) >>> 0;\n\tlb = ( b & LOW_WORD_MASK ) >>> 0;\n\n\tt = ( la*lb ) >>> 0;\n\tw3 = ( t & LOW_WORD_MASK ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( ha*lb ) + k ) >>> 0;\n\tw2 = ( t & LOW_WORD_MASK ) >>> 0;\n\tw1 = ( t >>> 16 ) >>> 0;\n\n\tt = ( ( la*hb ) + w2 ) >>> 0;\n\tk = ( t >>> 16 ) >>> 0;\n\n\tout[ offset ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer\n\tout[ offset + stride ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {Array<number>} output array\n*\n* @example\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\nfunction umuldw( a, b ) {\n\treturn fcn( a, b, [ 0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default umuldw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.\n*\n* @module @stdlib/number/uint32/base/muldw\n*\n* @example\n* import umuldw from '@stdlib/number/uint32/base/muldw';\n*\n* var v = umuldw( 0xAAAAAAAA, 0x55555555 );\n* // returns [ 954437176, 1908874354 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toUint32 from './../../../../int32/base/to-uint32';\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the left.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* import toBinaryStringUint32 from '@stdlib/number/uint32/base/to-binary-string';\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotl32( 2147483649, 10 );\n* // returns 1536\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000000000000000011000000000'\n*/\nfunction rotl32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x << shift ) | (x >>> ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nexport default rotl32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toUint32 from './../../../../int32/base/to-uint32';\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the right.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* import toBinaryStringUint32 from '@stdlib/number/uint32/base/to-binary-string';\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotr32( 2147483649, 10 );\n* // returns 6291456\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000011000000000000000000000'\n*/\nfunction rotr32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x >>> shift ) | (x << ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nexport default rotr32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math/base/special/floor';\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name add\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/add}\n*/\nimport add from './../../../uint32/base/add';\nsetReadOnly( ns, 'add', add );\n\n/**\n* @name fromBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/from-binary-string}\n*/\nimport fromBinaryStringUint32 from './../../../uint32/base/from-binary-string';\nsetReadOnly( ns, 'fromBinaryStringUint32', fromBinaryStringUint32 );\n\n/**\n* @name identity\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/identity}\n*/\nimport identity from './../../../uint32/base/identity';\nsetReadOnly( ns, 'identity', identity );\n\n/**\n* @name mul\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/mul}\n*/\nimport mul from './../../../uint32/base/mul';\nsetReadOnly( ns, 'mul', mul );\n\n/**\n* @name muldw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/muldw}\n*/\nimport muldw from './../../../uint32/base/muldw';\nsetReadOnly( ns, 'muldw', muldw );\n\n/**\n* @name rotl32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotl}\n*/\nimport rotl32 from './../../../uint32/base/rotl';\nsetReadOnly( ns, 'rotl32', rotl32 );\n\n/**\n* @name rotr32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotr}\n*/\nimport rotr32 from './../../../uint32/base/rotr';\nsetReadOnly( ns, 'rotr32', rotr32 );\n\n/**\n* @name sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/sub}\n*/\nimport sub from './../../../uint32/base/sub';\nsetReadOnly( ns, 'sub', sub );\n\n/**\n* @name toBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-binary-string}\n*/\nimport toBinaryStringUint32 from './../../../uint32/base/to-binary-string';\nsetReadOnly( ns, 'toBinaryStringUint32', toBinaryStringUint32 );\n\n/**\n* @name uint32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-int32}\n*/\nimport uint32ToInt32 from './../../../uint32/base/to-int32';\nsetReadOnly( ns, 'uint32ToInt32', uint32ToInt32 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of two unsigned 32-bit integers `x` and `y`.\n*\n* ## Method\n*\n* -   `>>> 0`: cast each operand to an unsigned 32-bit integer.\n* -   `+`: summation is exact as IEEE-754 integer addition of two unsigned 32-bit integers fits inside 53-bit range.\n* -   `>>> 0`: keep the low 32 bits.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} sum\n*\n* @example\n* var v = add( 1>>>0, 5>>>0 );\n* // returns 6\n*\n* @example\n* var v = add( 2>>>0, 5>>>0 );\n* // returns 7\n*\n* @example\n* var v = add( 0>>>0, 5>>>0 );\n* // returns 5\n*/\nfunction add( x, y ) {\n\treturn ( ( x>>>0 ) + ( y>>>0 ) )>>>0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default add;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math/base/special/pow';\nimport format from '@stdlib/string/format';\nimport toUint32 from './../../../../float64/base/to-uint32';\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 32-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000000000000000000000000000010';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111111111111111111111111111';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\nfunction fromBinaryStringUint32( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn toUint32( sum );\n}\n\n\n// EXPORTS //\n\nexport default fromBinaryStringUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluates the identity function for an unsigned 32-bit integer `x`.\n*\n* @param {uinteger} x - input value\n* @returns {uinteger} input value\n*\n* @example\n* var v = identity( 1 );\n* // returns 1\n*\n* @example\n* var v = identity( 2 );\n* // returns 2\n*\n* @example\n* var v = identity( 0 );\n* // returns 0\n*\n* @example\n* var v = identity( 4294967295 );\n* // returns 4294967295\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default identity;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111\nvar LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Performs C-like multiplication of two unsigned 32-bit integers.\n*\n* ## Method\n*\n* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words\n*\n*     ```tex\n*     a = w_h*2^{16} + w_l\n*     ```\n*\n*     where \\\\( w_h \\\\) is the most significant 16 bits and \\\\( w_l \\\\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\\\( 2^{32}-1 \\\\)\n*\n*     ```binarystring\n*     11111111111111111111111111111111\n*     ```\n*\n*     The 16-bit high word is then\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     and the 16-bit low word\n*\n*     ```binarystring\n*     1111111111111111\n*     ```\n*\n*     If we cast the high word to 32-bit precision and multiply by \\\\( 2^{16} \\\\) (equivalent to a 16-bit left shift), then the bit sequence is\n*\n*     ```binarystring\n*     11111111111111110000000000000000\n*     ```\n*\n*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is\n*\n*     ```binarystring\n*     00000000000000001111111111111111\n*     ```\n*\n*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\\\( 2^{32}-1 \\\\).\n*\n* -   Accordingly, the multiplication of two 32-bit integers can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     a \\cdot b &= ( a_h \\cdot 2^{16} + a_l) \\cdot ( b_h \\cdot 2^{16} + b_l) \\\\\n*           &= a_l \\cdot b_l + a_h \\cdot b_l \\cdot 2^{16} + a_l \\cdot b_h \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32} \\\\\n*           &= a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) \\cdot 2^{16} + (a_h \\cdot b_h) \\cdot 2^{32}\n*     \\end{align*}\n*     ```\n*\n* -   We note that multiplying (dividing) an integer by \\\\( 2^n \\\\) is equivalent to performing a left (right) shift of \\\\( n \\\\) bits.\n*\n* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\\\( 2^{32} \\\\). Stated another way, we only care about the low word of a 64-bit result.\n*\n* -   Accordingly, the last term, being evenly divisible by \\\\( 2^{32} \\\\), drops from the equation leaving the remaining two terms as the remainder.\n*\n*     ```tex\n*     a \\cdot b = a_l \\cdot b_l + (a_h \\cdot b_l + a_l \\cdot b_h) << 16\n*     ```\n*\n* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to \"overflow\". However, we can disregard (`>>>0`) overflow bits due to modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.\n*\n* @param {uinteger32} a - integer\n* @param {uinteger32} b - integer\n* @returns {uinteger32} product\n*\n* @example\n* var v = mul( 10>>>0, 4>>>0 );\n* // returns 40\n*/\nfunction mul( a, b ) {\n\tvar lbits;\n\tvar mbits;\n\tvar ha;\n\tvar hb;\n\tvar la;\n\tvar lb;\n\n\ta >>>= 0; // asm type annotation\n\tb >>>= 0; // asm type annotation\n\n\t// Isolate the most significant 16-bits:\n\tha = ( a>>>16 )>>>0; // asm type annotation\n\thb = ( b>>>16 )>>>0; // asm type annotation\n\n\t// Isolate the least significant 16-bits:\n\tla = ( a&LOW_WORD_MASK )>>>0; // asm type annotation\n\tlb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation\n\n\t// Compute partial sums:\n\tlbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible\n\tmbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow\n\n\t// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):\n\treturn ( lbits + mbits )>>>0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Subtracts two unsigned 32-bit integers `x` and `y`.\n*\n* ## Method\n*\n* -   `>>> 0`: cast each operand to an unsigned 32-bit integer.\n* -   `-`: subtraction is exact as IEEE-754 integer subtraction of two unsigned 32-bit integers fits inside 53-bit range.\n* -   `>>> 0`: keep the low 32 bits.\n*\n* @param {uinteger} x - first input value\n* @param {uinteger} y - second input value\n* @returns {uinteger} result\n*\n* @example\n* var v = sub( 5>>>0, 1>>>0 );\n* // returns 4\n*\n* @example\n* var v = sub( 5>>>0, 2>>>0 );\n* // returns 3\n*\n* @example\n* var v = sub( 5>>>0, 0>>>0 );\n* // returns 5\n*/\nfunction sub( x, y ) {\n\treturn ( ( x>>>0 ) - ( y>>>0 ) )>>>0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lpad from '@stdlib/string/left-pad';\nimport div2 from './div2.js';\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @param {uinteger32} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint32Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var a = new Uint32Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000100'\n*\n* @example\n* var a = new Uint32Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 32 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nexport default toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* import float64ToUint32 from '@stdlib/number/float64/base/to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* import float64ToUint32 from '@stdlib/number/float64/base/to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint32/base}\n*/\nimport base from './../../uint32/base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name Number\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/ctor}\n*/\nimport Number from './../ctor';\nsetReadOnly( ns, 'Number', Number );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32}\n*/\nimport float32 from './../float32';\nsetReadOnly( ns, 'float32', float32 );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64}\n*/\nimport float64 from './../float64';\nsetReadOnly( ns, 'float64', float64 );\n\n/**\n* @name int32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32}\n*/\nimport int32 from './../int32';\nsetReadOnly( ns, 'int32', int32 );\n\n/**\n* @name uint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8}\n*/\nimport uint8 from './../uint8';\nsetReadOnly( ns, 'uint8', uint8 );\n\n/**\n* @name uint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16}\n*/\nimport uint16 from './../uint16';\nsetReadOnly( ns, 'uint16', uint16 );\n\n/**\n* @name uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32}\n*/\nimport uint32 from './../uint32';\nsetReadOnly( ns, 'uint32', uint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["main$1","Number","fround","Math","FLOAT32_VIEW","Float32Array","float64ToFloat32$1","builtin","x","UINT32_VIEW","Uint32Array","buffer","toWordf","monotoneKey","word","SIGN_MASK","ulpdiff","y","wx","wy","isnanf","NaN","abs","ns","setReadOnly","a","b","maxULP","f32","SCALAR","normalizef","out","stride","offset","PINF","NINF","FLOAT32_SMALLEST_NORMAL","toFloat32","normalize","main","assign","div2","str","floor","MAX_ITER","MAX_BITS","float64ToFloat32","assert","w","getWord","BIAS","bstr","sign","frac","exp","length","Error","format","parseInt","substring","i","sum","pow","toFrac","toWord","nbits","n","f","repeat","NUM_SIGNIFICAND_BITS","j","mult2","lpad","rpad","HIGH","LOW","base","isLittleEndian","indices$3","FLOAT64_VIEW","Float64Array","indices","toWords","fcn","WX","WY","WZ","TWO_32","words","negate","subtract","wa","wb","wc","ha","hb","la","lb","ord","wz","isnan","HIGH$5","getHighWord","WORKSPACE","Uint8Array","indices$1","LOW$3","isInfinite","FLOAT64_SMALLEST_NORMAL","HIGH$1","LOW$1","float64ToInt64Bytes","bytes","view","hi","lo","DataView","IS_LITTLE_ENDIAN","setUint32","BYTES","VIEW","float64ToUint32","z","u","high","EXP_MASK","toDouble","byteOffset","byteLength","getInt32","low","isNegativeZero","key","value","type","TypeError","imul","LOW_WORD_MASK","imuldw","w1","w3","t","k","int32ToUint32","mul","muldw","NBITS","umuldw","MAX_SHIFT","toUint32","shift","float32","float64","int32","uint8","uint16","uint32"],"mappings":"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"}