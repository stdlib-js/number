{"version":3,"file":"index.mjs","sources":["../ctor/lib/index.js","../ctor/lib/number.js","../float32/base/to-word/lib/index.js","../float32/base/to-word/lib/main.js","../float32/base/exponent/lib/index.js","../float32/base/exponent/lib/main.js","../float64/base/to-float32/lib/polyfill.js","../float64/base/to-float32/lib/index.js","../float64/base/to-float32/lib/main.js","../float32/base/from-binary-string/lib/main.js","../float32/base/from-binary-string/lib/tofrac.js","../float32/base/from-word/lib/index.js","../float32/base/from-word/lib/main.js","../float32/base/normalize/lib/normalize.js","../float32/base/normalize/lib/index.js","../float32/base/normalize/lib/main.js","../float32/base/signbit/lib/index.js","../float32/base/signbit/lib/main.js","../float32/base/significand/lib/index.js","../float32/base/significand/lib/main.js","../float32/base/to-binary-string/lib/main.js","../float32/base/to-binary-string/lib/div2.js","../float32/base/to-binary-string/lib/mult2.js","../float32/base/to-int32/lib/index.js","../float32/base/to-int32/lib/main.js","../float32/base/to-uint32/lib/index.js","../float32/base/to-uint32/lib/main.js","../float32/lib/index.js","../float32/base/lib/index.js","../float32/base/from-binary-string/lib/index.js","../float32/base/to-binary-string/lib/index.js","../float64/base/get-high-word/lib/main.js","../float64/base/get-high-word/lib/high.js","../float64/base/get-high-word/lib/index.js","../float64/base/exponent/lib/index.js","../float64/base/exponent/lib/main.js","../float64/base/from-binary-string/lib/main.js","../float64/base/from-binary-string/lib/todouble.js","../float64/base/from-int64-bytes/lib/index.js","../float64/base/from-int64-bytes/lib/main.js","../float64/base/from-words/lib/main.js","../float64/base/from-words/lib/indices.js","../float64/base/get-low-word/lib/main.js","../float64/base/get-low-word/lib/low.js","../float64/base/normalize/lib/main.js","../float64/base/normalize/lib/normalize.js","../float64/base/set-high-word/lib/main.js","../float64/base/set-high-word/lib/high.js","../float64/base/set-low-word/lib/main.js","../float64/base/set-low-word/lib/low.js","../float64/base/signbit/lib/index.js","../float64/base/signbit/lib/main.js","../float64/base/to-binary-string/lib/main.js","../float64/base/to-binary-string/lib/div2.js","../float64/base/to-binary-string/lib/mult2.js","../float64/base/to-int32/lib/index.js","../float64/base/to-int32/lib/main.js","../float64/base/to-int64-bytes/lib/assign.js","../float64/base/to-int64-bytes/lib/index.js","../float64/base/to-int64-bytes/lib/main.js","../float64/base/to-uint32/lib/index.js","../float64/base/to-uint32/lib/main.js","../float64/base/to-words/lib/to_words.js","../float64/base/to-words/lib/indices.js","../float64/base/to-words/lib/index.js","../float64/base/to-words/lib/main.js","../float64/lib/index.js","../float64/base/lib/index.js","../float64/base/from-binary-string/lib/index.js","../float64/base/from-words/lib/index.js","../float64/base/get-low-word/lib/index.js","../float64/base/normalize/lib/index.js","../float64/base/set-high-word/lib/index.js","../float64/base/set-low-word/lib/index.js","../float64/base/to-binary-string/lib/index.js","../int32/base/to-uint32/lib/index.js","../int32/base/to-uint32/lib/main.js","../int32/lib/index.js","../int32/base/lib/index.js","../uint8/base/from-binary-string/lib/index.js","../uint8/base/from-binary-string/lib/main.js","../uint8/base/to-binary-string/lib/main.js","../uint8/base/to-binary-string/lib/div2.js","../uint8/lib/index.js","../uint8/base/lib/index.js","../uint8/base/to-binary-string/lib/index.js","../uint16/base/from-binary-string/lib/index.js","../uint16/base/from-binary-string/lib/main.js","../uint16/base/to-binary-string/lib/main.js","../uint16/base/to-binary-string/lib/div2.js","../uint16/lib/index.js","../uint16/base/lib/index.js","../uint16/base/to-binary-string/lib/index.js","../uint32/base/from-binary-string/lib/index.js","../uint32/base/from-binary-string/lib/main.js","../uint32/base/rotl/lib/index.js","../uint32/base/rotl/lib/main.js","../uint32/base/rotr/lib/index.js","../uint32/base/rotr/lib/main.js","../uint32/base/to-binary-string/lib/main.js","../uint32/base/to-binary-string/lib/div2.js","../uint32/base/to-int32/lib/index.js","../uint32/base/to-int32/lib/main.js","../uint32/lib/index.js","../uint32/base/lib/index.js","../uint32/base/to-binary-string/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a `Number` object.\n*\n* @module @stdlib/number/ctor\n*\n* @example\n* var Number = require( '@stdlib/number/ctor' );\n*\n* var v = new Number( 10.0 );\n* // returns <Number>\n*/\n\n// MODULES //\n\nvar Number = require( './number.js' );\n\n\n// EXPORTS //\n\nmodule.exports = Number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/to-word\n*\n* @example\n* var toWordf = require( '@stdlib/number/float32/base/to-word' );\n*\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\n\n// MODULES //\n\nvar toWordf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1.0 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {unsigned32} unsigned 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\nfunction toWordf( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/exponent\n*\n* @example\n* var exponent = require( '@stdlib/number/float32/base/exponent' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var exp = exponent( toFloat32( 3.14e34 ) );\n* // returns 114 => 2**114 ~ 2.08e34\n*\n* exp = exponent( toFloat32( 3.14e-34 ) );\n* // returns -112 => 2**-112 ~ 1.93e-34\n*\n* exp = exponent( toFloat32( -3.14 ) );\n* // returns 1\n*\n* exp = exponent( 0 );\n* // returns 0\n*\n* exp = exponent( NaN );\n* // returns 128\n*/\n\n// MODULES //\n\nvar exponent = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getWord = require( './../../../../float32/base/to-word' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\n\n\n// VARIABLES //\n\n// Exponent mask: 0 11111111 00000000000000000000000\nvar EXP_MASK = 0x7f800000; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer8} unbiased exponent\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( 3.14e34 ) ); // => 2**114 ~ 2.08e34\n* // returns 114\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( 3.14e-34 ) ); // => 2**-112 ~ 1.93e-34\n* // returns -112\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( -3.14 ) );\n* // returns 1\n*\n* @example\n* var exp = exponentf( 0.0 );\n* // returns -127\n*\n* @example\n* var exp = exponentf( NaN );\n* // returns 128\n*/\nfunction exponentf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\tw = ( w & EXP_MASK ) >>> 23;\n\n\t// Remove the bias and return:\n\treturn w - BIAS;\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponentf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/to-float32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nvar builtin = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nmodule.exports = fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toFloat32 = require( './../../../../float64/base/to-float32' );\nvar toFrac = require( './tofrac.js' );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var bstr = '01000000100000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '01000000010010010000111111011011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* @example\n* var bstr = '11111111011011000011101000110011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var v =  fromBinaryStringf( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '10000000000000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns -0.0\n*/\nfunction fromBinaryStringf( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 32 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 32, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 9), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toFrac( bstr.substring( 9 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -(BIAS-1); // subnormals are special in that their exponent is constant\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn toFloat32( sign*frac*pow(2, exp) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Converts a float's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {BinaryString} frac - literal bit representation of a float's fraction bit sequence\n* @returns {number} fraction value\n*\n* @example\n* var v = toFrac( '10001100010111110011000' );\n* // returns ~0.548\n*\n* @example\n* var v = toFrac( '11110101000101011111111' );\n* // returns ~0.957\n*/\nfunction toFrac( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toFrac;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @module @stdlib/number/float32/base/from-word\n*\n* @example\n* var fromWord = require( '@stdlib/number/float32/base/from-word' );\n*\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWord( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nvar fromWordf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// VARIABLES //\n\nvar UINT32_VIEW = new Uint32Array( 1 );\nvar FLOAT32_VIEW = new Float32Array( UINT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @param {uinteger32} word - unsigned integer\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWordf( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\nfunction fromWordf( word ) {\n\tUINT32_VIEW[ 0 ] = word;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWordf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/float32/smallest-normal' );\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar toFloat32 = require( './../../../../float64/base/to-float32' );\n\n\n// VARIABLES //\n\n// (1<<32)\nvar SCALAR = 8388608;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - single-precision floating-point number\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( [ 0.0, 0 ], toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n*\n* var v = normalizef( [ 0.0, 0 ], PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n*\n* var v = normalizef( [ 0.0, 0 ], NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( out, x ) {\n\tif (\n\t\tx !== x ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {\n\t\tx = toFloat32( x*SCALAR );\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = -23;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float32/base/normalize\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2,exp) === toFloat32(1.401e-45) );\n* // returns true\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef( out, toFloat32( 1.401e-45 ) );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar normalizef = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalize = require( './normalize.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - single-precision floating-point number\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef( out, toFloat32( 1.401e-45 ) );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = normalizef( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n*\n* var v = normalizef( PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n*\n* var v = normalizef( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn normalize( [ 0.0, 0 ], out );\n\t}\n\treturn normalize( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @module @stdlib/number/float32/base/signbit\n*\n* @example\n* var signbitf = require( '@stdlib/number/float32/base/signbit' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var bool = signbitf( toFloat32( 4.0 ) );\n* // returns false\n*\n* bool = signbitf( toFloat32( -9.14e-34 ) );\n* // returns true\n*\n* bool = signbitf( 0.0 );\n* // returns false\n*\n* bool = signbitf( -0.0 );\n* // returns true\n*/\n\n// MODULES //\n\nvar signbitf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = signbitf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toWord = require( './../../../../float32/base/to-word' );\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var bool = signbitf( toFloat32( 4.0 ) );\n* // returns false\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var bool = signbitf( toFloat32( -9.14e-34 ) );\n* // returns true\n*\n* @example\n* var bool = signbitf( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbitf( -0.0 );\n* // returns true\n*/\nfunction signbitf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the value's IEEE 754 binary representation:\n\tvar w = toWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( w >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nmodule.exports = signbitf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the significand of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/significand\n*\n* @example\n* var significandf = require( '@stdlib/number/float32/base/significand' );\n*\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111\n* // returns 4293751\n*\n* s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101\n* // returns 5288021\n*\n* s = significandf( toFloat32( -3.14 ) ); //  => 10010001111010111000011\n* // returns 4781507\n*\n* s = significandf( 0.0 ); // => 00000000000000000000000\n* // returns 0\n*\n* s = significandf( NaN ); // => 10000000000000000000000\n* // returns 4194304\n*/\n\n// MODULES //\n\nvar significandf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = significandf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getWord = require( './../../../../float32/base/to-word' );\n\n\n// VARIABLES //\n\n// Significand mask: 0 00000000 11111111111111111111111\nvar MASK = 0x007fffff; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the significand of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} significand\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111\n* // returns 4293751\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101\n* // returns 5288021\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( -3.14 ) ); // => 10010001111010111000011\n* // returns 4781507\n*\n* @example\n* var s = significandf( 0.0 ); // => 00000000000000000000000\n* // returns 0\n*\n* @example\n* var s = significandf( NaN ); // => 10000000000000000000000\n* // returns 4194304\n*/\nfunction significandf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the significand bits:\n\treturn w & MASK;\n}\n\n\n// EXPORTS //\n\nmodule.exports = significandf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar rpad = require( '@stdlib/string/right-pad' );\nvar lpad = require( '@stdlib/string/left-pad' );\nvar repeat = require( '@stdlib/string/repeat' );\nvar div2 = require( './div2.js' );\nvar mult2 = require( './mult2.js' );\n\n\n// VARIABLES //\n\n// TODO: consider placing in external modules\nvar NUM_SIGNIFICAND_BITS = 23;\nvar NUM_EXPONENT_BITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 4.0 ) );\n* // returns '01000000100000000000000000000000'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 3.141592653589793 ) );\n* // returns '01000000010010010000111111011011'\n*\n* @example\n* var str = toBinaryStringf( toFloat32( -1e38 ) );\n* // returns '11111110100101100111011010011001'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( -3.14e-39 ) );\n* // returns '10000000001000100011000100001011'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 1.4e-45 ) );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryStringf( 0.0 );\n* // returns '00000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( -0.0 );\n* // returns '10000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( NaN );\n* // returns '01111111110000000000000000000000'\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n* var str = toBinaryStringf( PINF );\n* // returns '01111111100000000000000000000000'\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n* var str = toBinaryStringf( NINF );\n* // returns '11111111100000000000000000000000'\n*/\nfunction toBinaryStringf( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || 1.0/x === NINF ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( x !== x ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 23 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2.0;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 149; // 127+22 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 24; // only 23 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mult2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a single-precision floating-point number to a signed 32-bit integer.\n*\n* @module @stdlib/number/float32/base/to-int32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var float32ToInt32 = require( '@stdlib/number/float32/base/to-int32' );\n*\n* var y = float32ToInt32( float64ToFloat32( 4294967295.0 ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* y = float32ToInt32( float64ToFloat32( -3.14 ) );\n* // returns -3\n*\n* y = float32ToInt32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float32ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( 4294967295.0 ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( -3.14 ) );\n* // returns -3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = float32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a single-precision floating-point number to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/float32/base/to-uint32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var float32ToUint32 = require( '@stdlib/number/float32/base/to-uint32' );\n*\n* var y = float32ToUint32( float64ToFloat32( 4294967297.0 ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* y = float32ToUint32( float64ToFloat32( -3.14 ) );\n* // returns 4294967293\n*\n* y = float32ToUint32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float32ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( 4294967297.0 ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( -3.14 ) );\n* // returns 4294967293\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../float32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name exponentf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/exponent}\n*/\nsetReadOnly( ns, 'exponentf', require( './../../../float32/base/exponent' ) );\n\n/**\n* @name fromBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringf', require( './../../../float32/base/from-binary-string' ) );\n\n/**\n* @name fromWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-word}\n*/\nsetReadOnly( ns, 'fromWordf', require( './../../../float32/base/from-word' ) );\n\n/**\n* @name normalizef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/normalize}\n*/\nsetReadOnly( ns, 'normalizef', require( './../../../float32/base/normalize' ) );\n\n/**\n* @name signbitf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/signbit}\n*/\nsetReadOnly( ns, 'signbitf', require( './../../../float32/base/signbit' ) );\n\n/**\n* @name significandf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/significand}\n*/\nsetReadOnly( ns, 'significandf', require( './../../../float32/base/significand' ) );\n\n/**\n* @name toBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringf', require( './../../../float32/base/to-binary-string' ) );\n\n/**\n* @name float32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-int32}\n*/\nsetReadOnly( ns, 'float32ToInt32', require( './../../../float32/base/to-int32' ) );\n\n/**\n* @name float32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-uint32}\n*/\nsetReadOnly( ns, 'float32ToUint32', require( './../../../float32/base/to-uint32' ) );\n\n/**\n* @name toWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-word}\n*/\nsetReadOnly( ns, 'toWordf', require( './../../../float32/base/to-word' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @module @stdlib/number/float32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringf = require( '@stdlib/number/float32/base/from-binary-string' );\n*\n* var bstr = '01000000100000000000000000000000';\n* var val = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* bstr = '01000000010010010000111111011011';\n* val = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* bstr = '11111111011011000011101000110011';\n* val = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*/\n\n// MODULES //\n\nvar fromBinaryStringf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/to-binary-string\n*\n* @example\n* var toBinaryStringf = require( '@stdlib/number/float32/base/to-binary-string' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var str = toBinaryStringf( toFloat32( 4.0 ) );\n* // returns '01000000100000000000000000000000'\n*\n* str = toBinaryStringf( toFloat32( 3.141592653589793 ) );\n* // returns '01000000010010010000111111011011'\n*\n* str = toBinaryStringf( toFloat32( -1.0e38 ) );\n* // returns '11111110100101100111011010011001'\n*\n* str = toBinaryStringf( toFloat32( -3.14e-39 ) );\n* // returns '10000000001000100011000100001011'\n*\n* str = toBinaryStringf( toFloat32( 1.4e-45 ) );\n* // returns '00000000000000000000000000000001'\n*\n* str = toBinaryStringf( 0.0 );\n* // returns '00000000000000000000000000000000'\n*\n* str = toBinaryStringf( -0.0 );\n* // returns '10000000000000000000000000000000'\n*\n* str = toBinaryStringf( NaN );\n* // returns '01111111110000000000000000000000'\n*\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n* str = toBinaryStringf( PINF );\n* // returns '01111111100000000000000000000000'\n*\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n* str = toBinaryStringf( NINF );\n* // returns '11111111100000000000000000000000'\n*/\n\n// MODULES //\n\nvar totoBinaryStringf = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = totoBinaryStringf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/get-high-word\n*\n* @example\n* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );\n*\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\n\n// MODULES //\n\nvar getHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/exponent\n*\n* @example\n* var exponent = require( '@stdlib/number/float64/base/exponent' );\n*\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* exp = exponent( -3.14 );\n* // returns 1\n*\n* exp = exponent( 0.0 );\n* // returns -1023\n*\n* exp = exponent( NaN );\n* // returns 1024\n*/\n\n// MODULES //\n\nvar exponent = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( './../../../../float64/base/get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toDouble = require( './todouble.js' );\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `64`\n* @returns {number} double\n*\n* @example\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* var val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* @example\n* var bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* var val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* var val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* var val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* @example\n* var bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns NaN\n*\n* @example\n* var bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* @example\n* var bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\nfunction fromBinaryString( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 64 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 64, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 12), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toDouble( bstr.substring( 12 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -1022; // (1-BIAS); subnormals are special\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn sign * frac * pow( 2.0, exp );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Converts a double's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {string} frac - literal bit representation of a double's fraction bit sequence\n* @returns {number} fraction)\n*/\nfunction toDouble( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/from-int64-bytes\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var fromInt64Bytes = require( '@stdlib/number/float64/base/from-int64-bytes' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64ByteArray( bytes, 1, 0 );\n* // returns -1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\n\n\n// VARIABLES //\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Initialize a workspace:\nvar WORKSPACE = new Uint8Array( 8 );\n\n\n// MAIN //\n\n/**\n* Converts a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* ## Notes\n*\n* -   The function assumes host byte order (endianness).\n*\n* @param {Uint8Array} bytes - byte array\n* @param {integer} stride - stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64Bytes( bytes, 1, 0 );\n* // returns -1.0\n*/\nfunction fromInt64Bytes( bytes, stride, offset ) {\n\tvar view;\n\tvar hi;\n\tvar lo;\n\tvar b;\n\tvar i;\n\n\tif ( stride === 1 ) { // contiguous\n\t\tb = bytes;\n\t} else { // non-contiguous\n\t\tb = WORKSPACE;\n\t\tfor ( i = 0; i < 8; i++ ) {\n\t\t\tb[ i ] = bytes[ offset ];\n\t\t\toffset += stride;\n\t\t}\n\t\toffset = 0;\n\t}\n\tview = new DataView( b.buffer, b.byteOffset, b.byteLength );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tlo = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\thi = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t} else {\n\t\thi = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\tlo = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t}\n\tif ( lo < 0 ) {\n\t\tlo += TWO_32;\n\t}\n\treturn ( hi*TWO_32 ) + lo;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar LOW = require( './low.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nmodule.exports = LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './normalize.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );\nvar isInfinite = require( '@stdlib/math/base/assert/is-infinite' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ 0 ] = x * SCALAR;\n\t\tout[ 1 ] = -52;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar LOW = require( './low.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nmodule.exports = LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @module @stdlib/number/float64/base/signbit\n*\n* @example\n* var signbit = require( '@stdlib/number/float64/base/signbit' );\n*\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* bool = signbit( -9.14e-307 );\n* // returns true\n*\n* bool = signbit( 0.0 );\n* // returns false\n*\n* bool = signbit( -0.0 );\n* // returns true\n*/\n\n// MODULES //\n\nvar signbit = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( './../../../../float64/base/get-high-word' );\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nmodule.exports = signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar rpad = require( '@stdlib/string/right-pad' );\nvar lpad = require( '@stdlib/string/left-pad' );\nvar repeat = require( '@stdlib/string/repeat' );\nvar div2 = require( './div2.js' );\nvar mult2 = require( './mult2.js' );\n\n\n// VARIABLES //\n\n// TODO: consider moving to external constants\nvar NUM_EXPONENT_BITS = 11;\nvar NUM_SIGNIFICAND_BITS = 52;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var str = toBinaryString( 4.0 );\n* // returns '0100000000010000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( 3.141592653589793 );\n* // returns '0100000000001001001000011111101101010100010001000010110100011000'\n*\n* @example\n* var str = toBinaryString( -1.0e308 );\n* // returns '1111111111100001110011001111001110000101111010111100100010100000'\n*\n* @example\n* var str = toBinaryString( -3.14e-320 );\n* // returns '1000000000000000000000000000000000000000000000000001100011010011'\n*\n* @example\n* var str = toBinaryString( 5.0e-324 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryString( 0.0 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -0.0 );\n* // returns '1000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( NaN );\n* // returns '0111111111111000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( Infinity );\n* // returns '0111111111110000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -Infinity );\n* // returns '1111111111110000000000000000000000000000000000000000000000000000'\n*/\nfunction toBinaryString( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || isNegativeZero( x ) ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0 ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 52 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {number} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 54; // only 53 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mult2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to a signed 32-bit integer.\n*\n* @module @stdlib/number/float64/base/to-int32\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n*\n* var y = float64ToInt32( 4294967295.0 );\n* // returns -1\n*\n* y = float64ToInt32( 3.14 );\n* // returns 3\n*\n* y = float64ToInt32( -3.14 );\n* // returns -3\n*\n* y = float64ToInt32( NaN );\n* // returns 0\n*\n* y = float64ToInt32( Infinity );\n* // returns 0\n*\n* y = float64ToInt32( -Infinity );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float64ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var y = float64ToInt32( 4294967295.0 );\n* // returns -1\n*\n* @example\n* var y = float64ToInt32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToInt32( -3.14 );\n* // returns -3\n*\n* @example\n* var y = float64ToInt32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( -Infinity );\n* // returns 0\n*/\nfunction float64ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Byte array workspace:\nvar BYTES = new Uint8Array( 8 );\nvar VIEW = new DataView( BYTES.buffer );\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x, out, stride, offset ) {\n\tvar hi;\n\tvar lo;\n\tvar i;\n\n\tif ( x === 0 ) {\n\t\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\t\tout[ offset ] = 0;\n\t\t\toffset += stride;\n\t\t}\n\t\treturn out;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tVIEW.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tVIEW.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\tout[ offset ] = BYTES[ i ];\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* @module @stdlib/number/float64/base/to-int64-bytes\n*\n* @example\n* var float64ToInt64Bytes = require( '@stdlib/number/float64/base/to-int64-bytes' );\n*\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var float64ToInt64Bytes = require( '@stdlib/number/float64/base/to-int64-bytes' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @returns {Uint8Array} byte array\n*\n* @example\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x ) {\n\tvar bytes;\n\tvar view;\n\tvar hi;\n\tvar lo;\n\n\tbytes = new Uint8Array( 8 );\n\tif ( x === 0 ) {\n\t\treturn bytes;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tview = new DataView( bytes.buffer );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tview.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tview.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\treturn bytes;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/float64/base/to-uint32\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n*\n* var y = float64ToUint32( 4294967297.0 );\n* // returns 1\n*\n* y = float64ToUint32( 3.14 );\n* // returns 3\n*\n* y = float64ToUint32( -3.14 );\n* // returns 4294967293\n*\n* y = float64ToUint32( NaN );\n* // returns 0\n*\n* y = float64ToUint32( Infinity );\n* // returns 0\n*\n* y = float64ToUint32( -Infinity );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float64ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float64ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var y = float64ToUint32( 4294967297.0 );\n* // returns 1\n*\n* @example\n* var y = float64ToUint32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToUint32( -3.14 );\n* // returns 4294967293\n*\n* @example\n* var y = float64ToUint32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( -Infinity );\n* // returns 0\n*/\nfunction float64ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var Uint32Array = require( '@stdlib/array/uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ 0 ] = UINT32_VIEW[ HIGH ];\n\tout[ 1 ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number/float64/base/to-words\n*\n* @example\n* var toWords = require( '@stdlib/number/float64/base/to-words' );\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array/uint32' );\n* var toWords = require( '@stdlib/number/float64/base/to-words' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar toWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './to_words.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array/uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base}\n*/\nsetReadOnly( ns, 'base', require( './../../float64/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name exponent\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/exponent}\n*/\nsetReadOnly( ns, 'exponent', require( './../../../float64/base/exponent' ) );\n\n/**\n* @name fromBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryString', require( './../../../float64/base/from-binary-string' ) );\n\n/**\n* @name fromInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-int64-bytes}\n*/\nsetReadOnly( ns, 'fromInt64Bytes', require( './../../../float64/base/from-int64-bytes' ) );\n\n/**\n* @name fromWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-words}\n*/\nsetReadOnly( ns, 'fromWords', require( './../../../float64/base/from-words' ) );\n\n/**\n* @name getHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-high-word}\n*/\nsetReadOnly( ns, 'getHighWord', require( './../../../float64/base/get-high-word' ) );\n\n/**\n* @name getLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-low-word}\n*/\nsetReadOnly( ns, 'getLowWord', require( './../../../float64/base/get-low-word' ) );\n\n/**\n* @name normalize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/normalize}\n*/\nsetReadOnly( ns, 'normalize', require( './../../../float64/base/normalize' ) );\n\n/**\n* @name setHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-high-word}\n*/\nsetReadOnly( ns, 'setHighWord', require( './../../../float64/base/set-high-word' ) );\n\n/**\n* @name setLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-low-word}\n*/\nsetReadOnly( ns, 'setLowWord', require( './../../../float64/base/set-low-word' ) );\n\n/**\n* @name signbit\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/signbit}\n*/\nsetReadOnly( ns, 'signbit', require( './../../../float64/base/signbit' ) );\n\n/**\n* @name toBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryString', require( './../../../float64/base/to-binary-string' ) );\n\n/**\n* @name float64ToFloat32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-float32}\n*/\nsetReadOnly( ns, 'float64ToFloat32', require( './../../../float64/base/to-float32' ) );\n\n/**\n* @name float64ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int32}\n*/\nsetReadOnly( ns, 'float64ToInt32', require( './../../../float64/base/to-int32' ) );\n\n/**\n* @name float64ToInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int64-bytes}\n*/\nsetReadOnly( ns, 'float64ToInt64Bytes', require( './../../../float64/base/to-int64-bytes' ) );\n\n/**\n* @name float64ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-uint32}\n*/\nsetReadOnly( ns, 'float64ToUint32', require( './../../../float64/base/to-uint32' ) );\n\n/**\n* @name toWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-words}\n*/\nsetReadOnly( ns, 'toWords', require( './../../../float64/base/to-words' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a literal bit representation.\n*\n* @module @stdlib/number/float64/base/from-binary-string\n*\n* @example\n* var fromBinaryString = require( '@stdlib/number/float64/base/from-binary-string' );\n*\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns NaN\n*\n* bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number/float64/base/from-words\n*\n* @example\n* var fromWords = require( '@stdlib/number/float64/base/from-words' );\n*\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/get-low-word\n*\n* @example\n* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );\n*\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\n\n// MODULES //\n\nvar getLowWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float64/base/normalize\n*\n* @example\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar normalize = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/set-high-word\n*\n* @example\n* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );\n*\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );\n* var PINF = require( '@stdlib/constants/float64/pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set the less significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/set-low-word\n*\n* @example\n* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );\n*\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar setLowWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/float64/base/to-binary-string' );\n*\n* var str = toBinaryString( 4.0 );\n* // returns '0100000000010000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( 3.141592653589793 );\n* // returns '0100000000001001001000011111101101010100010001000010110100011000'\n*\n* str = toBinaryString( -1.0e308 );\n* // returns '1111111111100001110011001111001110000101111010111100100010100000'\n*\n* str = toBinaryString( -3.14e-320 );\n* // returns '1000000000000000000000000000000000000000000000000001100011010011'\n*\n* str = toBinaryString( 5.0e-324 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000001'\n*\n* str = toBinaryString( 0.0 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( -0.0 );\n* // returns '1000000000000000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( NaN );\n* // returns '0111111111111000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( Infinity );\n* // returns '0111111111110000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( -Infinity );\n* // returns '1111111111110000000000000000000000000000000000000000000000000000'\n*/\n\n// MODULES //\n\nvar toBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a signed 32-bit integer to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/int32/base/to-uint32\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var int32ToUint32 = require( '@stdlib/number/int32/base/to-uint32' );\n*\n* var y = int32ToUint32( float64ToInt32( -32 ) );\n* // returns 4294967264\n*\n* y = int32ToUint32( float64ToInt32( 3 ) );\n* // returns 3\n*/\n\n// MODULES //\n\nvar int32ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = int32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a signed 32-bit integer to an unsigned 32-bit integer.\n*\n* @param {integer32} x - signed 32-bit integer\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var y = int32ToUint32( float64ToInt32( -1.0 ) );\n* // returns 4294967295\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var y = int32ToUint32( float64ToInt32( 3 ) );\n* // returns 3\n*/\nfunction int32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = int32ToUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/int32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../int32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name int32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/to-uint32}\n*/\nsetReadOnly( ns, 'int32ToUint32', require( './../../../int32/base/to-uint32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 8-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint8/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint8 = require( '@stdlib/number/uint8/base/from-binary-string' );\n*\n* var bstr = '01010101';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 85\n*\n* bstr = '00000000';\n* val = fromBinaryStringUint8( bstr );\n* // returns 0\n*\n* bstr = '00000010';\n* val = fromBinaryStringUint8( bstr );\n* // returns 2\n*\n* bstr = '11111111';\n* val = fromBinaryStringUint8( bstr );\n* // returns 255\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint8 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint8;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 8-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `8`\n* @returns {uinteger8} unsigned 8-bit integer\n*\n* @example\n* var bstr = '01010101';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 85\n*\n* @example\n* var bstr = '00000000';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000010';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 255\n*/\nfunction fromBinaryStringUint8( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint8;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 8-bit integer.\n*\n* @param {uinteger8} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint8Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000001'\n*\n* @example\n* var a = new Uint8Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000100'\n*\n* @example\n* var a = new Uint8Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 8 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint8/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint8/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint8', require( './../../../uint8/base/from-binary-string' ) );\n\n/**\n* @name toBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint8', require( './../../../uint8/base/to-binary-string' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 8-bit integer.\n*\n* @module @stdlib/number/uint8/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint8/base/to-binary-string' );\n*\n* var a = new Uint8Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '00000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '00000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '00001001'\n*/\n\n// MODULES //\n\nvar toBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 16-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint16/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint16 = require( '@stdlib/number/uint16/base/from-binary-string' );\n*\n* var bstr = '0101010101010101';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 21845\n*\n* bstr = '0000000000000000';\n* val = fromBinaryStringUint16( bstr );\n* // returns 0\n*\n* bstr = '0000000000000010';\n* val = fromBinaryStringUint16( bstr );\n* // returns 2\n*\n* bstr = '1111111111111111';\n* val = fromBinaryStringUint16( bstr );\n* // returns 65535\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint16 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint16;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 16-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `16`\n* @returns {uinteger16} unsigned 16-bit integer\n*\n* @example\n* var bstr = '0101010101010101';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 21845\n*\n* @example\n* var bstr = '0000000000000000';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '0000000000000010';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '1111111111111111';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 65535\n*/\nfunction fromBinaryStringUint16( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint16;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @param {uinteger16} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint16Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* @example\n* var a = new Uint16Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000100'\n*\n* @example\n* var a = new Uint16Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 16 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint16/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint16/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint16', require( './../../../uint16/base/from-binary-string' ) );\n\n/**\n* @name toBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint16', require( './../../../uint16/base/to-binary-string' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @module @stdlib/number/uint16/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint16/base/to-binary-string' );\n* var a = new Uint16Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '0000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '0000000000001001'\n*/\n\n// MODULES //\n\nvar toBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 32-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint32 = require( '@stdlib/number/uint32/base/from-binary-string' );\n*\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* bstr = '00000000000000000000000000000000';\n* val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* bstr = '00000000000000000000000000000010';\n* val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* bstr = '11111111111111111111111111111111';\n* val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toUint32 = require( './../../../../float64/base/to-uint32' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 32-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000000000000000000000000000010';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111111111111111111111111111';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\nfunction fromBinaryStringUint32( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn toUint32( sum );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bitwise rotation to the left.\n*\n* @module @stdlib/number/uint32/base/rotl\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var rotl32 = require( '@stdlib/number/uint32/base/rotl' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotl32( 2147483649, 10 );\n* // returns 1536\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000000000000000011000000000'\n*/\n\n// MODULES //\n\nvar rotl32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = rotl32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toUint32 = require( './../../../../int32/base/to-uint32' );\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the left.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotl32( 2147483649, 10 );\n* // returns 1536\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000000000000000011000000000'\n*/\nfunction rotl32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x << shift ) | (x >>> ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rotl32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bitwise rotation to the right.\n*\n* @module @stdlib/number/uint32/base/rotr\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var rotr32 = require( '@stdlib/number/uint32/base/rotr' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotr32( 2147483649, 10 );\n* // returns 6291456\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000011000000000000000000000'\n*/\n\n// MODULES //\n\nvar rotr32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = rotr32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toUint32 = require( './../../../../int32/base/to-uint32' );\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the right.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotr32( 2147483649, 10 );\n* // returns 6291456\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000011000000000000000000000'\n*/\nfunction rotr32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x >>> shift ) | (x << ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rotr32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @param {uinteger32} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint32Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var a = new Uint32Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000100'\n*\n* @example\n* var a = new Uint32Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 32 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @module @stdlib/number/uint32/base/to-int32\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );\n*\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\n\n// MODULES //\n\nvar uint32ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint32', require( './../../../uint32/base/from-binary-string' ) );\n\n/**\n* @name rotl32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotl}\n*/\nsetReadOnly( ns, 'rotl32', require( './../../../uint32/base/rotl' ) );\n\n/**\n* @name rotr32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotr}\n*/\nsetReadOnly( ns, 'rotr32', require( './../../../uint32/base/rotr' ) );\n\n/**\n* @name toBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint32', require( './../../../uint32/base/to-binary-string' ) );\n\n/**\n* @name uint32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-int32}\n*/\nsetReadOnly( ns, 'uint32ToInt32', require( './../../../uint32/base/to-int32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @module @stdlib/number/uint32/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var a = new Uint32Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '00000000000000000000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '00000000000000000000000000001001'\n*/\n\n// MODULES //\n\nvar toBinaryString = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name Number\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/ctor}\n*/\nimport Number from './../ctor';\nsetReadOnly( ns, 'Number', Number );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32}\n*/\nimport float32 from './../float32';\nsetReadOnly( ns, 'float32', float32 );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64}\n*/\nimport float64 from './../float64';\nsetReadOnly( ns, 'float64', float64 );\n\n/**\n* @name int32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32}\n*/\nimport int32 from './../int32';\nsetReadOnly( ns, 'int32', int32 );\n\n/**\n* @name uint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8}\n*/\nimport uint8 from './../uint8';\nsetReadOnly( ns, 'uint8', uint8 );\n\n/**\n* @name uint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16}\n*/\nimport uint16 from './../uint16';\nsetReadOnly( ns, 'uint16', uint16 );\n\n/**\n* @name uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32}\n*/\nimport uint32 from './../uint32';\nsetReadOnly( ns, 'uint32', uint32 );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["lib","Number","toWordf","Uint32Array","require$$1","FLOAT32_VIEW","require$$0","UINT32_VIEW","buffer","main","x","exponent","getWord","BIAS","w","polyfill","builtin","fround","Math","PINF","NINF","require$$2","pow","require$$3","format","require$$4","toFloat32","require$$5","toFrac","tofrac","frac","i","sum","length","require$$6","bstr","sign","exp","Error","parseInt","substring","NaN","fromWordf","Float32Array","word","FLOAT32_SMALLEST_NORMAL","abs","normalize","out","normalizef","arguments","signbitf","toWord","significandf","floor","rpad","lpad","repeat","require$$7","div2","div2_1","y","str","require$$8","mult2","mult2_1","j","nbits","n","f","NUM_SIGNIFICAND_BITS","float32ToInt32","float32ToUint32","ns","setReadOnly","fromBinaryStringf","totoBinaryStringf","require$$9","require$$10","HIGH","high","FLOAT64_VIEW","getHighWord","EXP_MASK","toDouble","todouble","IS_LITTLE_ENDIAN","DataView","TWO_32","WORKSPACE","bytes","stride","offset","view","hi","lo","b","byteOffset","byteLength","getInt32","Float64Array","indices","LOW","indices_1","low","fcn","FLOAT64_SMALLEST_NORMAL","isInfinite","isnan","normalize_1","signbit","isNegativeZero","MAX_ITER","require$$11","float64ToInt32","BYTES","VIEW","assign","setUint32","Uint8Array","float64ToUint32","to_words","toWords","fromBinaryString","fromWords","getLowWord","setHighWord","setLowWord","toBinaryString","require$$12","require$$13","require$$14","require$$15","require$$16","int32ToUint32","fromBinaryStringUint8","fromBinaryStringUint16","fromBinaryStringUint32","toUint32","rotl32","MAX_SHIFT","shift","rotr32","uint32ToInt32","float32","float64","int32","uint8","uint16","uint32"],"mappings":"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"}