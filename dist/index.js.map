{
  "version": 3,
  "sources": ["../ctor/lib/main.js", "../ctor/lib/index.js", "../float32/base/assert/is-same-value/lib/main.js", "../float32/base/assert/is-same-value/lib/index.js", "../float32/base/assert/is-same-value-zero/lib/main.js", "../float32/base/assert/is-same-value-zero/lib/index.js", "../float32/base/assert/lib/index.js", "../float32/base/to-word/lib/main.js", "../float32/base/to-word/lib/index.js", "../float32/base/exponent/lib/main.js", "../float32/base/exponent/lib/index.js", "../float64/base/to-float32/lib/main.js", "../float64/base/to-float32/lib/polyfill.js", "../float64/base/to-float32/lib/index.js", "../float32/base/from-binary-string/lib/tofrac.js", "../float32/base/from-binary-string/lib/main.js", "../float32/base/from-binary-string/lib/index.js", "../float32/base/from-word/lib/main.js", "../float32/base/from-word/lib/index.js", "../float32/base/normalize/lib/assign.js", "../float32/base/normalize/lib/main.js", "../float32/base/normalize/lib/index.js", "../float32/base/signbit/lib/main.js", "../float32/base/signbit/lib/index.js", "../float32/base/significand/lib/main.js", "../float32/base/significand/lib/index.js", "../float32/base/to-binary-string/lib/div2.js", "../float32/base/to-binary-string/lib/mult2.js", "../float32/base/to-binary-string/lib/main.js", "../float32/base/to-binary-string/lib/index.js", "../float32/base/to-int32/lib/main.js", "../float32/base/to-int32/lib/index.js", "../float32/base/to-uint32/lib/main.js", "../float32/base/to-uint32/lib/index.js", "../float32/base/lib/index.js", "../float32/lib/index.js", "../float64/base/assert/is-same-value/lib/main.js", "../float64/base/assert/is-same-value/lib/index.js", "../float64/base/assert/is-same-value-zero/lib/main.js", "../float64/base/assert/is-same-value-zero/lib/index.js", "../float64/base/assert/lib/index.js", "../float64/base/get-high-word/lib/high.js", "../float64/base/get-high-word/lib/main.js", "../float64/base/get-high-word/lib/index.js", "../float64/base/exponent/lib/main.js", "../float64/base/exponent/lib/index.js", "../float64/base/from-binary-string/lib/todouble.js", "../float64/base/from-binary-string/lib/main.js", "../float64/base/from-binary-string/lib/index.js", "../float64/base/from-int64-bytes/lib/main.js", "../float64/base/from-int64-bytes/lib/index.js", "../float64/base/from-words/lib/indices.js", "../float64/base/from-words/lib/main.js", "../float64/base/from-words/lib/index.js", "../float64/base/get-low-word/lib/low.js", "../float64/base/get-low-word/lib/main.js", "../float64/base/get-low-word/lib/index.js", "../float64/base/normalize/lib/assign.js", "../float64/base/normalize/lib/main.js", "../float64/base/normalize/lib/index.js", "../float64/base/set-high-word/lib/high.js", "../float64/base/set-high-word/lib/main.js", "../float64/base/set-high-word/lib/index.js", "../float64/base/set-low-word/lib/low.js", "../float64/base/set-low-word/lib/main.js", "../float64/base/set-low-word/lib/index.js", "../float64/base/signbit/lib/main.js", "../float64/base/signbit/lib/index.js", "../float64/base/to-binary-string/lib/div2.js", "../float64/base/to-binary-string/lib/mult2.js", "../float64/base/to-binary-string/lib/main.js", "../float64/base/to-binary-string/lib/index.js", "../float64/base/to-int32/lib/main.js", "../float64/base/to-int32/lib/index.js", "../float64/base/to-int64-bytes/lib/main.js", "../float64/base/to-int64-bytes/lib/assign.js", "../float64/base/to-int64-bytes/lib/index.js", "../float64/base/to-uint32/lib/main.js", "../float64/base/to-uint32/lib/index.js", "../float64/base/to-words/lib/indices.js", "../float64/base/to-words/lib/assign.js", "../float64/base/to-words/lib/main.js", "../float64/base/to-words/lib/index.js", "../float64/base/lib/index.js", "../float64/reviver/lib/main.js", "../float64/reviver/lib/index.js", "../float64/to-json/lib/main.js", "../float64/to-json/lib/index.js", "../float64/lib/index.js", "../int32/base/to-uint32/lib/main.js", "../int32/base/to-uint32/lib/index.js", "../int32/base/lib/index.js", "../int32/lib/index.js", "../uint8/base/from-binary-string/lib/main.js", "../uint8/base/from-binary-string/lib/index.js", "../uint8/base/to-binary-string/lib/div2.js", "../uint8/base/to-binary-string/lib/main.js", "../uint8/base/to-binary-string/lib/index.js", "../uint8/base/lib/index.js", "../uint8/lib/index.js", "../uint16/base/from-binary-string/lib/main.js", "../uint16/base/from-binary-string/lib/index.js", "../uint16/base/to-binary-string/lib/div2.js", "../uint16/base/to-binary-string/lib/main.js", "../uint16/base/to-binary-string/lib/index.js", "../uint16/base/lib/index.js", "../uint16/lib/index.js", "../uint32/base/from-binary-string/lib/main.js", "../uint32/base/from-binary-string/lib/index.js", "../uint32/base/rotl/lib/main.js", "../uint32/base/rotl/lib/index.js", "../uint32/base/rotr/lib/main.js", "../uint32/base/rotr/lib/index.js", "../uint32/base/to-binary-string/lib/div2.js", "../uint32/base/to-binary-string/lib/main.js", "../uint32/base/to-binary-string/lib/index.js", "../uint32/base/to-int32/lib/main.js", "../uint32/base/to-int32/lib/index.js", "../uint32/base/lib/index.js", "../uint32/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a `Number` object.\n*\n* @module @stdlib/number/ctor\n*\n* @example\n* var Number = require( '@stdlib/number/ctor' );\n*\n* var v = new Number( 10.0 );\n* // returns <Number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two single-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two single-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValuef( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValuef( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValuef( -0.0, 0.0 );\n* // returns false\n*\n* @example\n* var bool = isSameValuef( NaN, NaN );\n* // returns true\n*/\nfunction isSameValuef( a, b ) {\n\tif ( a === b ) {\n\t\tif ( a === 0.0 ) {\n\t\t\treturn 1.0 / a === 1.0 / b; // handles +-0\n\t\t}\n\t\treturn true;\n\t}\n\treturn ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSameValuef;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two single-precision floating-point numbers are the same value.\n*\n* @module @stdlib/number/float32/base/assert/is-same-value\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var isSameValuef = require( '@stdlib/number/float32/base/assert/is-same-value' );\n*\n* var bool = isSameValuef( toFloat32( 3.14 ), toFloat32( 3.14 ) );\n* // returns true\n*\n* bool = isSameValuef( toFloat32( -0.0 ), toFloat32( -0.0 ) );\n* // returns true\n*\n* bool = isSameValuef( toFloat32( -0.0 ), toFloat32( 0.0 ) );\n* // returns false\n*\n* bool = isSameValuef( toFloat32( NaN ), toFloat32( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two single-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two single-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValueZerof( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( -0.0, 0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZerof( NaN, NaN );\n* // returns true\n*/\nfunction isSameValueZerof( a, b ) {\n\treturn ( a === b ) || ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSameValueZerof;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two single-precision floating-point numbers are the same value.\n*\n* @module @stdlib/number/float32/base/assert/is-same-value-zero\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var isSameValueZerof = require( '@stdlib/number/float32/base/assert/is-same-value-zero' );\n*\n* var bool = isSameValueZerof( toFloat32( 3.14 ), toFloat32( 3.14 ) );\n* // returns true\n*\n* bool = isSameValueZerof( toFloat32( -0.0 ), toFloat32( -0.0 ) );\n* // returns true\n*\n* bool = isSameValueZerof( toFloat32( -0.0 ), toFloat32( 0.0 ) );\n* // returns true\n*\n* bool = isSameValueZerof( toFloat32( NaN ), toFloat32( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isSameValuef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/assert/is-same-value}\n*/\nsetReadOnly( ns, 'isSameValuef', require( './../../../../float32/base/assert/is-same-value' ) );\n\n/**\n* @name isSameValueZerof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/assert/is-same-value-zero}\n*/\nsetReadOnly( ns, 'isSameValueZerof', require( './../../../../float32/base/assert/is-same-value-zero' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1.0 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {unsigned32} unsigned 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\nfunction toWordf( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWordf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/to-word\n*\n* @example\n* var toWordf = require( '@stdlib/number/float32/base/to-word' );\n*\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var f32 = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*\n* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001\n* // returns 1068180177\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getWord = require( './../../../../float32/base/to-word' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\n\n\n// VARIABLES //\n\n// Exponent mask: 0 11111111 00000000000000000000000\nvar EXP_MASK = 0x7f800000; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer8} unbiased exponent\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( 3.14e34 ) ); // => 2**114 ~ 2.08e34\n* // returns 114\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( 3.14e-34 ) ); // => 2**-112 ~ 1.93e-34\n* // returns -112\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var exp = exponentf( toFloat32( -3.14 ) );\n* // returns 1\n*\n* @example\n* var exp = exponentf( 0.0 );\n* // returns -127\n*\n* @example\n* var exp = exponentf( NaN );\n* // returns 128\n*/\nfunction exponentf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\tw = ( w & EXP_MASK ) >>> 23;\n\n\t// Remove the bias and return:\n\treturn w - BIAS;\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponentf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/exponent\n*\n* @example\n* var exponent = require( '@stdlib/number/float32/base/exponent' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var exp = exponent( toFloat32( 3.14e34 ) );\n* // returns 114 => 2**114 ~ 2.08e34\n*\n* exp = exponent( toFloat32( 3.14e-34 ) );\n* // returns -112 => 2**-112 ~ 1.93e-34\n*\n* exp = exponent( toFloat32( -3.14 ) );\n* // returns 1\n*\n* exp = exponent( 0 );\n* // returns 0\n*\n* exp = exponent( NaN );\n* // returns 128\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nmodule.exports = fround;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToFloat32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/to-float32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nvar builtin = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToFloat32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Converts a float's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {BinaryString} frac - literal bit representation of a float's fraction bit sequence\n* @returns {number} fraction value\n*\n* @example\n* var v = toFrac( '10001100010111110011000' );\n* // returns ~0.548\n*\n* @example\n* var v = toFrac( '11110101000101011111111' );\n* // returns ~0.957\n*/\nfunction toFrac( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toFrac;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toFloat32 = require( './../../../../float64/base/to-float32' );\nvar toFrac = require( './tofrac.js' );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var bstr = '01000000100000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '01000000010010010000111111011011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* @example\n* var bstr = '11111111011011000011101000110011';\n* var v = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var v =  fromBinaryStringf( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '10000000000000000000000000000000';\n* var v = fromBinaryStringf( bstr );\n* // returns -0.0\n*/\nfunction fromBinaryStringf( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 32 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 32, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 9), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toFrac( bstr.substring( 9 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -(BIAS-1); // subnormals are special in that their exponent is constant\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn toFloat32( sign*frac*pow(2, exp) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an IEEE 754 literal bit representation.\n*\n* @module @stdlib/number/float32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringf = require( '@stdlib/number/float32/base/from-binary-string' );\n*\n* var bstr = '01000000100000000000000000000000';\n* var val = fromBinaryStringf( bstr );\n* // returns 4.0\n*\n* bstr = '01000000010010010000111111011011';\n* val = fromBinaryStringf( bstr );\n* // returns ~3.14\n*\n* bstr = '11111111011011000011101000110011';\n* val = fromBinaryStringf( bstr );\n* // returns ~-3.14e+38\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float32Array = require( '@stdlib/array/float32' );\n\n\n// VARIABLES //\n\nvar UINT32_VIEW = new Uint32Array( 1 );\nvar FLOAT32_VIEW = new Float32Array( UINT32_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Creates a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @param {uinteger32} word - unsigned integer\n* @returns {number} single-precision floating-point number\n*\n* @example\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWordf( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\nfunction fromWordf( word ) {\n\tUINT32_VIEW[ 0 ] = word;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWordf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a single-precision floating-point number from an unsigned integer corresponding to an IEEE 754 binary representation.\n*\n* @module @stdlib/number/float32/base/from-word\n*\n* @example\n* var fromWord = require( '@stdlib/number/float32/base/from-word' );\n*\n* var word = 1068180177; // => 0 01111111 01010110010001011010001\n*\n* var f32 = fromWord( word ); // when printed, implicitly promoted to float64\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/float32/smallest-normal' );\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar abs = require( '@stdlib/math/base/special/absf' );\nvar toFloat32 = require( './../../../../float64/base/to-float32' );\n\n\n// VARIABLES //\n\n// (1<<32)\nvar SCALAR = 8388608;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - single-precision floating-point number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( toFloat32( 1.401e-45 ), [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n*\n* var v = normalizef( PINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n*\n* var v = normalizef( NINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x, out, stride, offset ) {\n\tif (\n\t\tx !== x ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {\n\t\tx = toFloat32( x*SCALAR );\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = -23;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalizef;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalize = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {Array<number>} output array\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var v = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n*\n* var v = normalizef( PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n*\n* var v = normalizef( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x ) {\n\treturn normalize( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalizef;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float32/base/normalize\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2,exp) === toFloat32(1.401e-45) );\n* // returns true\n*\n* @example\n* var Float32Array = require( '@stdlib/array/float32' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var normalizef = require( '@stdlib/number/float32/base/normalize' );\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef.assign( toFloat32( 1.401e-45 ), out, 1, 0 );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toWord = require( './../../../../float32/base/to-word' );\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var bool = signbitf( toFloat32( 4.0 ) );\n* // returns false\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var bool = signbitf( toFloat32( -9.14e-34 ) );\n* // returns true\n*\n* @example\n* var bool = signbitf( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbitf( -0.0 );\n* // returns true\n*/\nfunction signbitf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the value's IEEE 754 binary representation:\n\tvar w = toWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( w >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nmodule.exports = signbitf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @module @stdlib/number/float32/base/signbit\n*\n* @example\n* var signbitf = require( '@stdlib/number/float32/base/signbit' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var bool = signbitf( toFloat32( 4.0 ) );\n* // returns false\n*\n* bool = signbitf( toFloat32( -9.14e-34 ) );\n* // returns true\n*\n* bool = signbitf( 0.0 );\n* // returns false\n*\n* bool = signbitf( -0.0 );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getWord = require( './../../../../float32/base/to-word' );\n\n\n// VARIABLES //\n\n// Significand mask: 0 00000000 11111111111111111111111\nvar MASK = 0x007fffff; // TODO: consider making an external constant\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the significand of a single-precision floating-point number.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} significand\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111\n* // returns 4293751\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101\n* // returns 5288021\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var s = significandf( toFloat32( -3.14 ) ); // => 10010001111010111000011\n* // returns 4781507\n*\n* @example\n* var s = significandf( 0.0 ); // => 00000000000000000000000\n* // returns 0\n*\n* @example\n* var s = significandf( NaN ); // => 10000000000000000000000\n* // returns 4194304\n*/\nfunction significandf( x ) {\n\t// Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:\n\tvar w = getWord( x );\n\n\t// Apply a mask to isolate only the significand bits:\n\treturn w & MASK;\n}\n\n\n// EXPORTS //\n\nmodule.exports = significandf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the significand of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/significand\n*\n* @example\n* var significandf = require( '@stdlib/number/float32/base/significand' );\n*\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var s = significandf( toFloat32( 3.14e34 ) ); // => 10000011000010001110111\n* // returns 4293751\n*\n* s = significandf( toFloat32( 3.14e-34 ) ); // => 10100001011000001010101\n* // returns 5288021\n*\n* s = significandf( toFloat32( -3.14 ) ); //  => 10010001111010111000011\n* // returns 4781507\n*\n* s = significandf( 0.0 ); // => 00000000000000000000000\n* // returns 0\n*\n* s = significandf( NaN ); // => 10000000000000000000000\n* // returns 4194304\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2.0;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 149; // 127+22 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 24; // only 23 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mult2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float32/pinf' );\nvar NINF = require( '@stdlib/constants/float32/ninf' );\nvar BIAS = require( '@stdlib/constants/float32/exponent-bias' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar rpad = require( '@stdlib/string/right-pad' );\nvar lpad = require( '@stdlib/string/left-pad' );\nvar repeat = require( '@stdlib/string/repeat' );\nvar div2 = require( './div2.js' );\nvar mult2 = require( './mult2.js' );\n\n\n// VARIABLES //\n\n// TODO: consider placing in external modules\nvar NUM_SIGNIFICAND_BITS = 23;\nvar NUM_EXPONENT_BITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 4.0 ) );\n* // returns '01000000100000000000000000000000'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 3.141592653589793 ) );\n* // returns '01000000010010010000111111011011'\n*\n* @example\n* var str = toBinaryStringf( toFloat32( -1e38 ) );\n* // returns '11111110100101100111011010011001'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( -3.14e-39 ) );\n* // returns '10000000001000100011000100001011'\n*\n* @example\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var str = toBinaryStringf( toFloat32( 1.4e-45 ) );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryStringf( 0.0 );\n* // returns '00000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( -0.0 );\n* // returns '10000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryStringf( NaN );\n* // returns '01111111110000000000000000000000'\n*\n* @example\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n* var str = toBinaryStringf( PINF );\n* // returns '01111111100000000000000000000000'\n*\n* @example\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n* var str = toBinaryStringf( NINF );\n* // returns '11111111100000000000000000000000'\n*/\nfunction toBinaryStringf( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || 1.0/x === NINF ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( x !== x ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 23 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryStringf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @module @stdlib/number/float32/base/to-binary-string\n*\n* @example\n* var toBinaryStringf = require( '@stdlib/number/float32/base/to-binary-string' );\n* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n*\n* var str = toBinaryStringf( toFloat32( 4.0 ) );\n* // returns '01000000100000000000000000000000'\n*\n* str = toBinaryStringf( toFloat32( 3.141592653589793 ) );\n* // returns '01000000010010010000111111011011'\n*\n* str = toBinaryStringf( toFloat32( -1.0e38 ) );\n* // returns '11111110100101100111011010011001'\n*\n* str = toBinaryStringf( toFloat32( -3.14e-39 ) );\n* // returns '10000000001000100011000100001011'\n*\n* str = toBinaryStringf( toFloat32( 1.4e-45 ) );\n* // returns '00000000000000000000000000000001'\n*\n* str = toBinaryStringf( 0.0 );\n* // returns '00000000000000000000000000000000'\n*\n* str = toBinaryStringf( -0.0 );\n* // returns '10000000000000000000000000000000'\n*\n* str = toBinaryStringf( NaN );\n* // returns '01111111110000000000000000000000'\n*\n* var PINF = require( '@stdlib/constants/float32/pinf' );\n* str = toBinaryStringf( PINF );\n* // returns '01111111100000000000000000000000'\n*\n* var NINF = require( '@stdlib/constants/float32/ninf' );\n* str = toBinaryStringf( NINF );\n* // returns '11111111100000000000000000000000'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( 4294967295.0 ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( -3.14 ) );\n* // returns -3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToInt32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = float32ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a single-precision floating-point number to a signed 32-bit integer.\n*\n* @module @stdlib/number/float32/base/to-int32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var float32ToInt32 = require( '@stdlib/number/float32/base/to-int32' );\n*\n* var y = float32ToInt32( float64ToFloat32( 4294967295.0 ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* y = float32ToInt32( float64ToFloat32( -3.14 ) );\n* // returns -3\n*\n* y = float32ToInt32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* y = float32ToInt32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float32ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float32ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a single-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - single-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( 4294967297.0 ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( -3.14 ) );\n* // returns 4294967293\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var y = float32ToUint32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\nfunction float32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float32ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a single-precision floating-point number to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/float32/base/to-uint32\n*\n* @example\n* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n* var float32ToUint32 = require( '@stdlib/number/float32/base/to-uint32' );\n*\n* var y = float32ToUint32( float64ToFloat32( 4294967297.0 ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( 3.14 ) );\n* // returns 3\n*\n* y = float32ToUint32( float64ToFloat32( -3.14 ) );\n* // returns 4294967293\n*\n* y = float32ToUint32( float64ToFloat32( NaN ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( Infinity ) );\n* // returns 0\n*\n* y = float32ToUint32( float64ToFloat32( -Infinity ) );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float32ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float32ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float32/base/assert}\n*/\nsetReadOnly( ns, 'assert', require( './../../../float32/base/assert' ) );\n\n/**\n* @name exponentf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/exponent}\n*/\nsetReadOnly( ns, 'exponentf', require( './../../../float32/base/exponent' ) );\n\n/**\n* @name fromBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringf', require( './../../../float32/base/from-binary-string' ) );\n\n/**\n* @name fromWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/from-word}\n*/\nsetReadOnly( ns, 'fromWordf', require( './../../../float32/base/from-word' ) );\n\n/**\n* @name normalizef\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/normalize}\n*/\nsetReadOnly( ns, 'normalizef', require( './../../../float32/base/normalize' ) );\n\n/**\n* @name signbitf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/signbit}\n*/\nsetReadOnly( ns, 'signbitf', require( './../../../float32/base/signbit' ) );\n\n/**\n* @name significandf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/significand}\n*/\nsetReadOnly( ns, 'significandf', require( './../../../float32/base/significand' ) );\n\n/**\n* @name toBinaryStringf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringf', require( './../../../float32/base/to-binary-string' ) );\n\n/**\n* @name float32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-int32}\n*/\nsetReadOnly( ns, 'float32ToInt32', require( './../../../float32/base/to-int32' ) );\n\n/**\n* @name float32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-uint32}\n*/\nsetReadOnly( ns, 'float32ToUint32', require( './../../../float32/base/to-uint32' ) );\n\n/**\n* @name toWordf\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32/base/to-word}\n*/\nsetReadOnly( ns, 'toWordf', require( './../../../float32/base/to-word' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../float32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValue( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValue( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValue( -0.0, 0.0 );\n* // returns false\n*\n* @example\n* var bool = isSameValue( NaN, NaN );\n* // returns true\n*/\nfunction isSameValue( a, b ) {\n\tif ( a === b ) {\n\t\tif ( a === 0.0 ) {\n\t\t\treturn 1.0 / a === 1.0 / b; // handles +-0\n\t\t}\n\t\treturn true;\n\t}\n\treturn ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSameValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two double-precision floating-point numbers are the same value.\n*\n* @module @stdlib/number/float64/base/assert/is-same-value\n*\n* @example\n* var isSameValue = require( '@stdlib/number/float64/base/assert/is-same-value' );\n*\n* var bool = isSameValue( 3.14, 3.14 );\n* // returns true\n*\n* bool = isSameValue( -0.0, -0.0 );\n* // returns true\n*\n* bool = isSameValue( -0.0, 0.0 );\n* // returns false\n*\n* bool = isSameValue( NaN, NaN );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are the same value.\n*\n* ## Notes\n*\n* -   The function implements the SameValueZero Algorithm used by `TypedArray` and `ArrayBuffer` constructors, `Map` and `Set` operations, `String.prototype.includes`, and `Array.prototype.includes` since ES2016.\n* -   In contrast to the strict equality operator `===`, `NaNs` are considered the same value.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are the same value\n*\n* @example\n* var bool = isSameValueZero( 3.14, 3.14 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( -0.0, -0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( -0.0, 0.0 );\n* // returns true\n*\n* @example\n* var bool = isSameValueZero( NaN, NaN );\n* // returns true\n*/\nfunction isSameValueZero( a, b ) {\n\treturn ( a === b ) || ( a !== a && b !== b ); // handles NaNs\n}\n\n\n// EXPORTS //\n\nmodule.exports = isSameValueZero;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two double-precision floating-point numbers are the same value.\n*\n* @module @stdlib/number/float64/base/assert/is-same-value-zero\n*\n* @example\n* var isSameValueZero = require( '@stdlib/number/float64/base/assert/is-same-value-zero' );\n*\n* var bool = isSameValueZero( 3.14, 3.14 );\n* // returns true\n*\n* bool = isSameValueZero( -0.0, -0.0 );\n* // returns true\n*\n* bool = isSameValueZero( -0.0, 0.0 );\n* // returns true\n*\n* bool = isSameValueZero( NaN, NaN );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isSameValue\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/assert/is-same-value}\n*/\nsetReadOnly( ns, 'isSameValue', require( './../../../../float64/base/assert/is-same-value' ) );\n\n/**\n* @name isSameValueZero\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/assert/is-same-value-zero}\n*/\nsetReadOnly( ns, 'isSameValueZero', require( './../../../../float64/base/assert/is-same-value-zero' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/get-high-word\n*\n* @example\n* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );\n*\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( './../../../../float64/base/get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/exponent\n*\n* @example\n* var exponent = require( '@stdlib/number/float64/base/exponent' );\n*\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* exp = exponent( -3.14 );\n* // returns 1\n*\n* exp = exponent( 0.0 );\n* // returns -1023\n*\n* exp = exponent( NaN );\n* // returns 1024\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Converts a double's fraction bit sequence to a numeric value.\n*\n* @private\n* @param {string} frac - literal bit representation of a double's fraction bit sequence\n* @returns {number} fraction)\n*/\nfunction toDouble( frac ) {\n\tvar sum = 0;\n\tvar i;\n\tfor ( i = 0; i < frac.length; i++ ) {\n\t\tif ( frac[ i ] === '1' ) {\n\t\t\tsum += pow( 2.0, -(i+1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toDouble;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toDouble = require( './todouble.js' );\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `64`\n* @returns {number} double\n*\n* @example\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* @example\n* var bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* var val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* @example\n* var bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* var val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* var val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* var val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* @example\n* var bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* @example\n* var bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* @example\n* var bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns NaN\n*\n* @example\n* var bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* @example\n* var bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\nfunction fromBinaryString( bstr ) {\n\tvar sign;\n\tvar frac;\n\tvar exp;\n\n\tif ( bstr.length !== 64 ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', 64, bstr ) );\n\t}\n\t// Sign bit:\n\tsign = ( bstr[0] === '1' ) ? -1.0 : 1.0;\n\n\t// Exponent bits:\n\texp = parseInt( bstr.substring(1, 12), 2 ) - BIAS;\n\n\t// Fraction bits:\n\tfrac = toDouble( bstr.substring( 12 ) );\n\n\t// Detect `0` (all 0s) and subnormals (exponent bits are all 0, but fraction bits are not all 0s)...\n\tif ( exp === -BIAS ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? 0.0 : -0.0;\n\t\t}\n\t\texp = -1022; // (1-BIAS); subnormals are special\n\t}\n\t// Detect `+-inf` (exponent bits are all 1 and fraction is 0) and `NaN` (exponent bits are all 1 and fraction is not 0)...\n\telse if ( exp === BIAS+1 ) {\n\t\tif ( frac === 0.0 ) {\n\t\t\treturn ( sign === 1.0 ) ? PINF : NINF;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Normal numbers...\n\telse {\n\t\t// Account for hidden/implicit bit (2^0):\n\t\tfrac += 1.0;\n\t}\n\treturn sign * frac * pow( 2.0, exp );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a literal bit representation.\n*\n* @module @stdlib/number/float64/base/from-binary-string\n*\n* @example\n* var fromBinaryString = require( '@stdlib/number/float64/base/from-binary-string' );\n*\n* var bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n* var val = fromBinaryString( bstr );\n* // returns 4.0\n*\n* bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n* val = fromBinaryString( bstr );\n* // returns 3.141592653589793\n*\n* bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n* val = fromBinaryString( bstr );\n* // returns -1.0e308\n*\n* bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n* val = fromBinaryString( bstr );\n* // returns -3.14e-320\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n* val = fromBinaryString( bstr );\n* // returns 5.0e-324\n*\n* bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns 0.0\n*\n* bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -0.0\n*\n* bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns NaN\n*\n* bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns Infinity\n*\n* bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n* val = fromBinaryString( bstr );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\n\n\n// VARIABLES //\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Initialize a workspace:\nvar WORKSPACE = new Uint8Array( 8 );\n\n\n// MAIN //\n\n/**\n* Converts a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* ## Notes\n*\n* -   The function assumes host byte order (endianness).\n*\n* @param {Uint8Array} bytes - byte array\n* @param {integer} stride - stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64Bytes( bytes, 1, 0 );\n* // returns -1.0\n*/\nfunction fromInt64Bytes( bytes, stride, offset ) {\n\tvar view;\n\tvar hi;\n\tvar lo;\n\tvar b;\n\tvar i;\n\n\tif ( stride === 1 ) { // contiguous\n\t\tb = bytes;\n\t} else { // non-contiguous\n\t\tb = WORKSPACE;\n\t\tfor ( i = 0; i < 8; i++ ) {\n\t\t\tb[ i ] = bytes[ offset ];\n\t\t\toffset += stride;\n\t\t}\n\t\toffset = 0;\n\t}\n\tview = new DataView( b.buffer, b.byteOffset, b.byteLength );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tlo = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\thi = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t} else {\n\t\thi = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\tlo = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t}\n\tif ( lo < 0 ) {\n\t\tlo += TWO_32;\n\t}\n\treturn ( hi*TWO_32 ) + lo;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromInt64Bytes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/from-int64-bytes\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var fromInt64Bytes = require( '@stdlib/number/float64/base/from-int64-bytes' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64ByteArray( bytes, 1, 0 );\n* // returns -1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number/float64/base/from-words\n*\n* @example\n* var fromWords = require( '@stdlib/number/float64/base/from-words' );\n*\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nmodule.exports = LOW;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar LOW = require( './low.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getLowWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/get-low-word\n*\n* @example\n* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );\n*\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );\nvar isInfinite = require( '@stdlib/math/base/assert/is-infinite' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number/float64/base/normalize\n*\n* @example\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n* var pow = require( '@stdlib/math/base/special/pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var normalize = require( '@stdlib/number/float64/base/normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = setHighWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/set-high-word\n*\n* @example\n* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );\n*\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );\n* var PINF = require( '@stdlib/constants/float64/pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nmodule.exports = LOW;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar LOW = require( './low.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = setLowWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set the less significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/set-low-word\n*\n* @example\n* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );\n*\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );\n* var PINF = require( '@stdlib/constants/float64/pinf' );\n* var NINF = require( '@stdlib/constants/float64/ninf' );\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( './../../../../float64/base/get-high-word' );\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nmodule.exports = signbit;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @module @stdlib/number/float64/base/signbit\n*\n* @example\n* var signbit = require( '@stdlib/number/float64/base/signbit' );\n*\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* bool = signbit( -9.14e-307 );\n* // returns true\n*\n* bool = signbit( 0.0 );\n* // returns false\n*\n* bool = signbit( -0.0 );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {number} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar MAX_BITS = 54; // only 53 bits for fraction\n\n\n// MAIN //\n\n/**\n* Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @private\n* @param {number} x - number less than 1\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = mult2( 0.234375 );\n* // returns '001111'\n*\n* @example\n* var v = mult2( 0.0 );\n* // returns ''\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0.0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2.0;\n\t\tif ( y >= 1.0 ) {\n\t\t\tx = y - 1.0;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1.0 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mult2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar BIAS = require( '@stdlib/constants/float64/exponent-bias' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar rpad = require( '@stdlib/string/right-pad' );\nvar lpad = require( '@stdlib/string/left-pad' );\nvar repeat = require( '@stdlib/string/repeat' );\nvar div2 = require( './div2.js' );\nvar mult2 = require( './mult2.js' );\n\n\n// VARIABLES //\n\n// TODO: consider moving to external constants\nvar NUM_EXPONENT_BITS = 11;\nvar NUM_SIGNIFICAND_BITS = 52;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var str = toBinaryString( 4.0 );\n* // returns '0100000000010000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( 3.141592653589793 );\n* // returns '0100000000001001001000011111101101010100010001000010110100011000'\n*\n* @example\n* var str = toBinaryString( -1.0e308 );\n* // returns '1111111111100001110011001111001110000101111010111100100010100000'\n*\n* @example\n* var str = toBinaryString( -3.14e-320 );\n* // returns '1000000000000000000000000000000000000000000000000001100011010011'\n*\n* @example\n* var str = toBinaryString( 5.0e-324 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000001'\n*\n* @example\n* var str = toBinaryString( 0.0 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -0.0 );\n* // returns '1000000000000000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( NaN );\n* // returns '0111111111111000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( Infinity );\n* // returns '0111111111110000000000000000000000000000000000000000000000000000'\n*\n* @example\n* var str = toBinaryString( -Infinity );\n* // returns '1111111111110000000000000000000000000000000000000000000000000000'\n*/\nfunction toBinaryString( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0.0 || isNegativeZero( x ) ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === PINF || x === NINF ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '1', NUM_EXPONENT_BITS ); // all 1s\n\t\tstr = '1' + repeat( '0', NUM_SIGNIFICAND_BITS-1 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0 ) {\n\t\t// Based on IEEE 754-1985...\n\t\texp = repeat( '0', NUM_EXPONENT_BITS ); // all 0s\n\t\tstr = repeat( '0', NUM_SIGNIFICAND_BITS ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, NUM_EXPONENT_BITS, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 52 fraction bits:\n\tstr = rpad( str, NUM_SIGNIFICAND_BITS, '0' ).substring( 0, NUM_SIGNIFICAND_BITS );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of a double-precision floating-point number.\n*\n* @module @stdlib/number/float64/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/float64/base/to-binary-string' );\n*\n* var str = toBinaryString( 4.0 );\n* // returns '0100000000010000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( 3.141592653589793 );\n* // returns '0100000000001001001000011111101101010100010001000010110100011000'\n*\n* str = toBinaryString( -1.0e308 );\n* // returns '1111111111100001110011001111001110000101111010111100100010100000'\n*\n* str = toBinaryString( -3.14e-320 );\n* // returns '1000000000000000000000000000000000000000000000000001100011010011'\n*\n* str = toBinaryString( 5.0e-324 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000001'\n*\n* str = toBinaryString( 0.0 );\n* // returns '0000000000000000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( -0.0 );\n* // returns '1000000000000000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( NaN );\n* // returns '0111111111111000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( Infinity );\n* // returns '0111111111110000000000000000000000000000000000000000000000000000'\n*\n* str = toBinaryString( -Infinity );\n* // returns '1111111111110000000000000000000000000000000000000000000000000000'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to a signed 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var y = float64ToInt32( 4294967295.0 );\n* // returns -1\n*\n* @example\n* var y = float64ToInt32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToInt32( -3.14 );\n* // returns -3\n*\n* @example\n* var y = float64ToInt32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToInt32( -Infinity );\n* // returns 0\n*/\nfunction float64ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to a signed 32-bit integer.\n*\n* @module @stdlib/number/float64/base/to-int32\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n*\n* var y = float64ToInt32( 4294967295.0 );\n* // returns -1\n*\n* y = float64ToInt32( 3.14 );\n* // returns 3\n*\n* y = float64ToInt32( -3.14 );\n* // returns -3\n*\n* y = float64ToInt32( NaN );\n* // returns 0\n*\n* y = float64ToInt32( Infinity );\n* // returns 0\n*\n* y = float64ToInt32( -Infinity );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float64ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @returns {Uint8Array} byte array\n*\n* @example\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x ) {\n\tvar bytes;\n\tvar view;\n\tvar hi;\n\tvar lo;\n\n\tbytes = new Uint8Array( 8 );\n\tif ( x === 0 ) {\n\t\treturn bytes;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tview = new DataView( bytes.buffer );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tview.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tview.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\treturn bytes;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar DataView = require( '@stdlib/array/dataview' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Byte array workspace:\nvar BYTES = new Uint8Array( 8 );\nvar VIEW = new DataView( BYTES.buffer );\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x, out, stride, offset ) {\n\tvar hi;\n\tvar lo;\n\tvar i;\n\n\tif ( x === 0 ) {\n\t\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\t\tout[ offset ] = 0;\n\t\t\toffset += stride;\n\t\t}\n\t\treturn out;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tVIEW.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tVIEW.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\tout[ offset ] = BYTES[ i ];\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToInt64Bytes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* @module @stdlib/number/float64/base/to-int64-bytes\n*\n* @example\n* var float64ToInt64Bytes = require( '@stdlib/number/float64/base/to-int64-bytes' );\n*\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*\n* @example\n* var Uint8Array = require( '@stdlib/array/uint8' );\n* var float64ToInt64Bytes = require( '@stdlib/number/float64/base/to-int64-bytes' );\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to an unsigned 32-bit integer.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var y = float64ToUint32( 4294967297.0 );\n* // returns 1\n*\n* @example\n* var y = float64ToUint32( 3.14 );\n* // returns 3\n*\n* @example\n* var y = float64ToUint32( -3.14 );\n* // returns 4294967293\n*\n* @example\n* var y = float64ToUint32( NaN );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( Infinity );\n* // returns 0\n*\n* @example\n* var y = float64ToUint32( -Infinity );\n* // returns 0\n*/\nfunction float64ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = float64ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/float64/base/to-uint32\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n*\n* var y = float64ToUint32( 4294967297.0 );\n* // returns 1\n*\n* y = float64ToUint32( 3.14 );\n* // returns 3\n*\n* y = float64ToUint32( -3.14 );\n* // returns 4294967293\n*\n* y = float64ToUint32( NaN );\n* // returns 0\n*\n* y = float64ToUint32( Infinity );\n* // returns 0\n*\n* y = float64ToUint32( -Infinity );\n* // returns 0\n*/\n\n// MODULES //\n\nvar float64ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = float64ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert/is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array/uint32' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint32Array = require( '@stdlib/array/uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number/float64/base/to-words\n*\n* @example\n* var toWords = require( '@stdlib/number/float64/base/to-words' );\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array/uint32' );\n* var toWords = require( '@stdlib/number/float64/base/to-words' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base/assert}\n*/\nsetReadOnly( ns, 'assert', require( './../../../float64/base/assert' ) );\n\n/**\n* @name exponent\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/exponent}\n*/\nsetReadOnly( ns, 'exponent', require( './../../../float64/base/exponent' ) );\n\n/**\n* @name fromBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryString', require( './../../../float64/base/from-binary-string' ) );\n\n/**\n* @name fromInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-int64-bytes}\n*/\nsetReadOnly( ns, 'fromInt64Bytes', require( './../../../float64/base/from-int64-bytes' ) );\n\n/**\n* @name fromWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-words}\n*/\nsetReadOnly( ns, 'fromWords', require( './../../../float64/base/from-words' ) );\n\n/**\n* @name getHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-high-word}\n*/\nsetReadOnly( ns, 'getHighWord', require( './../../../float64/base/get-high-word' ) );\n\n/**\n* @name getLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-low-word}\n*/\nsetReadOnly( ns, 'getLowWord', require( './../../../float64/base/get-low-word' ) );\n\n/**\n* @name normalize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/normalize}\n*/\nsetReadOnly( ns, 'normalize', require( './../../../float64/base/normalize' ) );\n\n/**\n* @name setHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-high-word}\n*/\nsetReadOnly( ns, 'setHighWord', require( './../../../float64/base/set-high-word' ) );\n\n/**\n* @name setLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-low-word}\n*/\nsetReadOnly( ns, 'setLowWord', require( './../../../float64/base/set-low-word' ) );\n\n/**\n* @name signbit\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/signbit}\n*/\nsetReadOnly( ns, 'signbit', require( './../../../float64/base/signbit' ) );\n\n/**\n* @name toBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryString', require( './../../../float64/base/to-binary-string' ) );\n\n/**\n* @name float64ToFloat32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-float32}\n*/\nsetReadOnly( ns, 'float64ToFloat32', require( './../../../float64/base/to-float32' ) );\n\n/**\n* @name float64ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int32}\n*/\nsetReadOnly( ns, 'float64ToInt32', require( './../../../float64/base/to-int32' ) );\n\n/**\n* @name float64ToInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int64-bytes}\n*/\nsetReadOnly( ns, 'float64ToInt64Bytes', require( './../../../float64/base/to-int64-bytes' ) );\n\n/**\n* @name float64ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-uint32}\n*/\nsetReadOnly( ns, 'float64ToUint32', require( './../../../float64/base/to-uint32' ) );\n\n/**\n* @name toWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-words}\n*/\nsetReadOnly( ns, 'toWords', require( './../../../float64/base/to-words' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {*} revived value\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"float64\",\"value\":\"NaN\"}';\n*\n* var v = parseJSON( str, reviver );\n* // returns NaN\n*/\nfunction reviver( key, value ) {\n\tif (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\tvalue.type === 'float64'\n\t) {\n\t\tif ( value.value === 'NaN' ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( value.value === '+Infinity' ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( value.value === '-Infinity' ) {\n\t\t\treturn NINF;\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviver;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized number.\n*\n* @module @stdlib/number/float64/reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviveNumber = require( '@stdlib/number/float64/reviver' );\n*\n* var str = '{\"type\":\"float64\",\"value\":\"NaN\"}';\n*\n* var out = parseJSON( str, reviveNumber );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of a number.\n*\n* @param {number} x - input value\n* @throws {TypeError} must provide a number\n* @returns {Object} JSON representation\n*\n* @example\n* var json = number2json( NaN );\n* // returns { 'type': 'float64', 'value': 'NaN' }\n*/\nfunction number2json( x ) {\n\tif ( typeof x !== 'number' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', x ) );\n\t}\n\tif ( x !== x ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': 'NaN'\n\t\t};\n\t}\n\tif ( x === PINF ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': '+Infinity'\n\t\t};\n\t}\n\tif ( x === NINF ) {\n\t\treturn {\n\t\t\t'type': 'float64',\n\t\t\t'value': '-Infinity'\n\t\t};\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = number2json;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a JSON representation of a number.\n*\n* @module @stdlib/number/float64/to-json\n*\n* @example\n* var number2json = require( '@stdlib/number/float64/to-json' );\n*\n* var str = JSON.stringify( number2json( NaN ) );\n* // returns '{\"type\":\"float64\",\"value\":\"NaN\"}'\n*/\n\n// MODULES //\n\nvar number2json = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = number2json;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base}\n*/\nsetReadOnly( ns, 'base', require( './../../float64/base' ) );\n\n/**\n* @name reviver\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/reviver}\n*/\nsetReadOnly( ns, 'reviver', require( './../../float64/reviver' ) );\n\n/**\n* @name toJSON\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/to-json}\n*/\nsetReadOnly( ns, 'toJSON', require( './../../float64/to-json' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a signed 32-bit integer to an unsigned 32-bit integer.\n*\n* @param {integer32} x - signed 32-bit integer\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var y = int32ToUint32( float64ToInt32( -1.0 ) );\n* // returns 4294967295\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var y = int32ToUint32( float64ToInt32( 3 ) );\n* // returns 3\n*/\nfunction int32ToUint32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x >>> 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = int32ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a signed 32-bit integer to an unsigned 32-bit integer.\n*\n* @module @stdlib/number/int32/base/to-uint32\n*\n* @example\n* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );\n* var int32ToUint32 = require( '@stdlib/number/int32/base/to-uint32' );\n*\n* var y = int32ToUint32( float64ToInt32( -32 ) );\n* // returns 4294967264\n*\n* y = int32ToUint32( float64ToInt32( 3 ) );\n* // returns 3\n*/\n\n// MODULES //\n\nvar int32ToUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = int32ToUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name int32ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32/base/to-uint32}\n*/\nsetReadOnly( ns, 'int32ToUint32', require( './../../../int32/base/to-uint32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/int32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../int32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 8-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `8`\n* @returns {uinteger8} unsigned 8-bit integer\n*\n* @example\n* var bstr = '01010101';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 85\n*\n* @example\n* var bstr = '00000000';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000010';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 255\n*/\nfunction fromBinaryStringUint8( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint8;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 8-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint8/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint8 = require( '@stdlib/number/uint8/base/from-binary-string' );\n*\n* var bstr = '01010101';\n* var val = fromBinaryStringUint8( bstr );\n* // returns 85\n*\n* bstr = '00000000';\n* val = fromBinaryStringUint8( bstr );\n* // returns 0\n*\n* bstr = '00000010';\n* val = fromBinaryStringUint8( bstr );\n* // returns 2\n*\n* bstr = '11111111';\n* val = fromBinaryStringUint8( bstr );\n* // returns 255\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint8 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint8;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 8;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 8-bit integer.\n*\n* @param {uinteger8} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint8Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000001'\n*\n* @example\n* var a = new Uint8Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000100'\n*\n* @example\n* var a = new Uint8Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 8 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 8-bit integer.\n*\n* @module @stdlib/number/uint8/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint8/base/to-binary-string' );\n*\n* var a = new Uint8Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '00000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '00000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '00001001'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint8', require( './../../../uint8/base/from-binary-string' ) );\n\n/**\n* @name toBinaryStringUint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint8', require( './../../../uint8/base/to-binary-string' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint8/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint8/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 16-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `16`\n* @returns {uinteger16} unsigned 16-bit integer\n*\n* @example\n* var bstr = '0101010101010101';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 21845\n*\n* @example\n* var bstr = '0000000000000000';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '0000000000000010';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '1111111111111111';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 65535\n*/\nfunction fromBinaryStringUint16( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint16;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 16-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint16/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint16 = require( '@stdlib/number/uint16/base/from-binary-string' );\n*\n* var bstr = '0101010101010101';\n* var val = fromBinaryStringUint16( bstr );\n* // returns 21845\n*\n* bstr = '0000000000000000';\n* val = fromBinaryStringUint16( bstr );\n* // returns 0\n*\n* bstr = '0000000000000010';\n* val = fromBinaryStringUint16( bstr );\n* // returns 2\n*\n* bstr = '1111111111111111';\n* val = fromBinaryStringUint16( bstr );\n* // returns 65535\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint16 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint16;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 16;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @param {uinteger16} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint16Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* @example\n* var a = new Uint16Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000100'\n*\n* @example\n* var a = new Uint16Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '0000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 16 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 16-bit integer.\n*\n* @module @stdlib/number/uint16/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint16/base/to-binary-string' );\n* var a = new Uint16Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '0000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '0000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '0000000000001001'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint16', require( './../../../uint16/base/from-binary-string' ) );\n\n/**\n* @name toBinaryStringUint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint16', require( './../../../uint16/base/to-binary-string' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint16/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint16/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar format = require( '@stdlib/string/format' );\nvar toUint32 = require( './../../../../float64/base/to-uint32' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Creates an unsigned 32-bit integer from a literal bit representation.\n*\n* @param {BinaryString} bstr - string which is a literal bit representation\n* @throws {Error} must provide a string with a length equal to `32`\n* @returns {uinteger32} unsigned 32-bit integer\n*\n* @example\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* @example\n* var bstr = '00000000000000000000000000000000';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* @example\n* var bstr = '00000000000000000000000000000010';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* @example\n* var bstr = '11111111111111111111111111111111';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\nfunction fromBinaryStringUint32( bstr ) {\n\tvar sum;\n\tvar i;\n\tif ( bstr.length !== NBITS ) {\n\t\tthrow new Error( format( 'invalid argument. Input string must have a length equal to %u. Value: `%s`.', NBITS, bstr ) );\n\t}\n\tsum = 0;\n\tfor ( i = 0; i < bstr.length; i++ ) {\n\t\tif ( bstr[ i ] === '1' ) {\n\t\t\tsum += pow( 2, (NBITS-i-1) );\n\t\t}\n\t}\n\treturn toUint32( sum );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an unsigned 32-bit integer from a literal bit representation.\n*\n* @module @stdlib/number/uint32/base/from-binary-string\n*\n* @example\n* var fromBinaryStringUint32 = require( '@stdlib/number/uint32/base/from-binary-string' );\n*\n* var bstr = '01010101010101010101010101010101';\n* var val = fromBinaryStringUint32( bstr );\n* // returns 1431655765\n*\n* bstr = '00000000000000000000000000000000';\n* val = fromBinaryStringUint32( bstr );\n* // returns 0\n*\n* bstr = '00000000000000000000000000000010';\n* val = fromBinaryStringUint32( bstr );\n* // returns 2\n*\n* bstr = '11111111111111111111111111111111';\n* val = fromBinaryStringUint32( bstr );\n* // returns 4294967295\n*/\n\n// MODULES //\n\nvar fromBinaryStringUint32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromBinaryStringUint32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toUint32 = require( './../../../../int32/base/to-uint32' );\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the left.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotl32( 2147483649, 10 );\n* // returns 1536\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000000000000000011000000000'\n*/\nfunction rotl32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x << shift ) | (x >>> ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rotl32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bitwise rotation to the left.\n*\n* @module @stdlib/number/uint32/base/rotl\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var rotl32 = require( '@stdlib/number/uint32/base/rotl' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotl32( 2147483649, 10 );\n* // returns 1536\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000000000000000011000000000'\n*/\n\n// MODULES //\n\nvar rotl32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = rotl32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toUint32 = require( './../../../../int32/base/to-uint32' );\n\n\n// VARIABLES //\n\n// Shift mask: 00000000000000000000000000011111\nvar MAX_SHIFT = toUint32( 31 );\n\n\n// MAIN //\n\n/**\n* Performs a bitwise rotation to the right.\n*\n* ## References\n*\n* -   [Safe, Efficient, and Portable Rotate in C/C++](http://blog.regehr.org/archives/1063)\n* -   [Best practices for rotates in C/C++](https://stackoverflow.com/a/776523/224132)\n* -   [Near constant time rotate that does not violate the standards](https://stackoverflow.com/a/31488147/224132)\n*\n* @param {uinteger32} x - unsigned integer\n* @param {uinteger32} shift - number of bits to shift\n* @returns {uinteger32} shifted integer\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotr32( 2147483649, 10 );\n* // returns 6291456\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000011000000000000000000000'\n*/\nfunction rotr32( x, shift ) {\n\tshift &= MAX_SHIFT;\n\treturn toUint32( ( x >>> shift ) | (x << ((-shift) & MAX_SHIFT)) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rotr32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bitwise rotation to the right.\n*\n* @module @stdlib/number/uint32/base/rotr\n*\n* @example\n* var toBinaryStringUint32 = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var rotr32 = require( '@stdlib/number/uint32/base/rotr' );\n*\n* var bstr = toBinaryStringUint32( 2147483649 );\n* // returns '10000000000000000000000000000001'\n*\n* var x = rotr32( 2147483649, 10 );\n* // returns 6291456\n*\n* bstr = toBinaryStringUint32( x );\n* // returns '00000000011000000000000000000000'\n*/\n\n// MODULES //\n\nvar rotr32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = rotr32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @private\n* @param {NonNegativeInteger} x - nonnegative integer\n* @returns {BinaryString} bit representation\n*\n* @example\n* var v = div2( 3 );\n* // returns '11'\n*\n* @example\n* var v = div2( 0 );\n* // returns ''\n*\n* @example\n* var v = div2( 12 );\n* // returns '1100'\n*\n* @example\n* var v = div2( 188 );\n* // returns '10111100'\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar i;\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\ti = NBITS;\n\twhile ( x > 0 && i ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lpad = require( '@stdlib/string/left-pad' );\nvar div2 = require( './div2.js' );\n\n\n// VARIABLES //\n\nvar NBITS = 32;\n\n\n// MAIN //\n\n/**\n* Returns a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @param {uinteger32} x - input value\n* @returns {BinaryString} bit representation\n*\n* @example\n* var a = new Uint32Array( [ 1 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* @example\n* var a = new Uint32Array( [ 4 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000100'\n*\n* @example\n* var a = new Uint32Array( [ 9 ] );\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000001001'\n*/\nfunction toBinaryString( x ) {\n\tvar b;\n\n\t// Convert the input value to a bit string:\n\tb = div2( x );\n\n\t// Left pad the bit string to ensure 32 bits are represented:\n\tb = lpad( b, NBITS, '0' );\n\n\treturn b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toBinaryString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string giving the literal bit representation of an unsigned 32-bit integer.\n*\n* @module @stdlib/number/uint32/base/to-binary-string\n*\n* @example\n* var toBinaryString = require( '@stdlib/number/uint32/base/to-binary-string' );\n* var a = new Uint32Array( [ 1, 4, 9 ] );\n*\n* var str = toBinaryString( a[0] );\n* // returns '00000000000000000000000000000001'\n*\n* str = toBinaryString( a[1] );\n* // returns '00000000000000000000000000000100'\n*\n* str = toBinaryString( a[2] );\n* // returns '00000000000000000000000000001001'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = uint32ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @module @stdlib/number/uint32/base/to-int32\n*\n* @example\n* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );\n* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );\n*\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\n\n// MODULES //\n\nvar uint32ToInt32 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = uint32ToInt32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name fromBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryStringUint32', require( './../../../uint32/base/from-binary-string' ) );\n\n/**\n* @name rotl32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotl}\n*/\nsetReadOnly( ns, 'rotl32', require( './../../../uint32/base/rotl' ) );\n\n/**\n* @name rotr32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/rotr}\n*/\nsetReadOnly( ns, 'rotr32', require( './../../../uint32/base/rotr' ) );\n\n/**\n* @name toBinaryStringUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryStringUint32', require( './../../../uint32/base/to-binary-string' ) );\n\n/**\n* @name uint32ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32/base/to-int32}\n*/\nsetReadOnly( ns, 'uint32ToInt32', require( './../../../uint32/base/to-int32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/uint32/base}\n*/\nsetReadOnly( ns, 'base', require( './../../uint32/base' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name Number\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/ctor}\n*/\nsetReadOnly( ns, 'Number', require( './../ctor' ) );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float32}\n*/\nsetReadOnly( ns, 'float32', require( './../float32' ) );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64}\n*/\nsetReadOnly( ns, 'float64', require( './../float64' ) );\n\n/**\n* @name int32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/int32}\n*/\nsetReadOnly( ns, 'int32', require( './../int32' ) );\n\n/**\n* @name uint8\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint8}\n*/\nsetReadOnly( ns, 'uint8', require( './../uint8' ) );\n\n/**\n* @name uint16\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint16}\n*/\nsetReadOnly( ns, 'uint16', require( './../uint16' ) );\n\n/**\n* @name uint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/uint32}\n*/\nsetReadOnly( ns, 'uint32', require( './../uint32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "uGAAA,IAAAA,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBAA,GAAO,QAAU,SCtBjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCvCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoDA,SAASC,GAAcC,EAAGC,EAAI,CAC7B,OAAKD,IAAMC,EACLD,IAAM,EACH,EAAMA,IAAM,EAAMC,EAEnB,GAECD,IAAMA,GAAKC,IAAMA,CAC3B,CAKAH,GAAO,QAAUC,KCjEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA4CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCjDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkDA,SAASC,GAAkBC,EAAGC,EAAI,CACjC,OAASD,IAAMC,GAASD,IAAMA,GAAKC,IAAMA,CAC1C,CAKAH,GAAO,QAAUC,KCzDjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA4CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCjDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,GAAaC,EAAI,eAAgB,IAA6D,EAS9FD,GAAaC,EAAI,mBAAoB,IAAkE,EAKvGF,GAAO,QAAUE,IC3DjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAe,QAAS,uBAAwB,EAChDC,GAAc,QAAS,sBAAuB,EAK9CC,GAAe,IAAIF,GAAc,CAAI,EACrCG,GAAc,IAAIF,GAAaC,GAAa,MAAO,EAoBvD,SAASE,GAASC,EAAI,CACrB,OAAAH,GAAc,CAAE,EAAIG,EACbF,GAAa,CAAE,CACvB,CAKAJ,GAAO,QAAUK,KCzDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAuCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC5CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAU,IACVC,GAAO,QAAS,yCAA0C,EAM1DC,GAAW,WAkCf,SAASC,GAAWC,EAAI,CAEvB,IAAIC,EAAIL,GAASI,CAAE,EAGnB,OAAAC,GAAMA,EAAIH,MAAe,GAGlBG,EAAIJ,EACZ,CAKAF,GAAO,QAAUI,KC7EjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA+CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCpDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAW,OAAO,KAAK,QAAW,WAAe,KAAK,OAAS,KAKnED,GAAO,QAAUC,KC3BjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAe,QAAS,uBAAwB,EAKhDC,GAAe,IAAID,GAAc,CAAE,EAevC,SAASE,GAAkBC,EAAI,CAC9B,OAAAF,GAAc,CAAE,EAAIE,EACbF,GAAc,CAAE,CACxB,CAKAF,GAAO,QAAUG,KClDjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkCA,IAAIC,GAAU,KACVC,GAAW,KAKXC,EACC,OAAOF,IAAY,WACvBE,EAAmBF,GAEnBE,EAAmBD,GAMpBF,GAAO,QAAUG,IClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAoBnD,SAASC,GAAQC,EAAO,CACvB,IAAIC,EAAM,EACN,EACJ,IAAM,EAAI,EAAG,EAAID,EAAK,OAAQ,IACxBA,EAAM,CAAE,IAAM,MAClBC,GAAOH,GAAK,EAAK,EAAE,EAAE,EAAG,GAG1B,OAAOG,CACR,CAKAJ,GAAO,QAAUE,KCxDjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,yCAA0C,EAC1DC,GAAM,QAAS,+BAAgC,EAC/CC,GAAS,QAAS,uBAAwB,EAC1CC,GAAY,IACZC,GAAS,KAqCb,SAASC,GAAmBC,EAAO,CAClC,IAAIC,EACAC,EACAC,EAEJ,GAAKH,EAAK,SAAW,GACpB,MAAM,IAAI,MAAOJ,GAAQ,8EAA+E,GAAII,CAAK,CAAE,EAYpH,GATAC,EAASD,EAAK,CAAC,IAAM,IAAQ,GAAO,EAGpCG,EAAM,SAAUH,EAAK,UAAU,EAAG,CAAC,EAAG,CAAE,EAAIN,EAG5CQ,EAAOJ,GAAQE,EAAK,UAAW,CAAE,CAAE,EAG9BG,IAAQ,CAACT,EAAO,CACpB,GAAKQ,IAAS,EACb,OAASD,IAAS,EAAQ,EAAM,GAEjCE,EAAM,EAAET,EAAK,EACd,KAEK,IAAKS,IAAQT,EAAK,EACtB,OAAKQ,IAAS,EACJD,IAAS,EAAQT,GAAOC,GAE3B,IAKPS,GAAQ,EAET,OAAOL,GAAWI,EAAKC,EAAKP,GAAI,EAAGQ,CAAG,CAAE,CACzC,CAKAZ,GAAO,QAAUQ,KC3GjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA2CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KChDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAKhDC,GAAc,IAAIF,GAAa,CAAE,EACjCG,GAAe,IAAIF,GAAcC,GAAY,MAAO,EAiBxD,SAASE,GAAWC,EAAO,CAC1B,OAAAH,GAAa,CAAE,EAAIG,EACZF,GAAc,CAAE,CACxB,CAKAJ,GAAO,QAAUK,KCtDjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCzCjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAA0B,QAAS,2CAA4C,EAC/EC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,GAAM,QAAS,gCAAiC,EAChDC,GAAY,IAMZC,GAAS,QAyCb,SAASC,GAAYC,EAAGC,EAAKC,EAAQC,EAAS,CAC7C,OACCH,IAAMA,GACNA,IAAMN,IACNM,IAAML,IAENM,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,GAEHD,IAAM,GAAOJ,GAAKI,CAAE,EAAIP,IAC5BO,EAAIH,GAAWG,EAAEF,EAAO,EACxBG,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,IAClBD,IAERA,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,EACR,CAKAT,GAAO,QAAUO,KCjGjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAY,IAqChB,SAASC,GAAYC,EAAI,CACxB,OAAOF,GAAWE,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACzC,CAKAH,GAAO,QAAUE,KClEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAuDA,IAAIC,GAAc,QAAS,uDAAwD,EAC/EC,GAAO,KACPC,GAAS,IAKbF,GAAaC,GAAM,SAAUC,EAAO,EAKpCH,GAAO,QAAUE,KCnEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAS,IA6Bb,SAASC,GAAUC,EAAI,CAEtB,IAAIC,EAAIH,GAAQE,CAAE,EAGlB,MAAS,GAAAC,IAAM,GAChB,CAKAJ,GAAO,QAAUE,KC9DjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA4CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCjDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAU,IAMVC,GAAO,QAkCX,SAASC,GAAcC,EAAI,CAE1B,IAAIC,EAAIJ,GAASG,CAAE,EAGnB,OAAOC,EAAIH,EACZ,CAKAF,GAAO,QAAUG,KCzEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAgDA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCrDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAQ,QAAS,iCAAkC,EA4BvD,SAASC,GAAMC,EAAI,CAKlB,QAJIC,EAAM,GACNC,EAGIF,EAAI,GACXE,EAAIF,EAAI,EACRA,EAAIF,GAAOI,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAGd,OAAOA,CACR,CAKAJ,GAAO,QAAUE,KCtEjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAW,IACXC,GAAW,GAoBf,SAASC,GAAOC,EAAI,CACnB,IAAIC,EACAC,EACAC,EACAC,EAGJ,GADAH,EAAM,GACDD,IAAM,EACV,OAAOC,EAKR,IAHAG,EAAIP,EAGEM,EAAI,EAAGA,EAAIN,IAChBK,EAAIF,EAAI,EACHE,GAAK,GACTF,EAAIE,EAAI,EACRD,GAAO,IACFG,IAAMP,IACVO,EAAID,KAGLH,EAAIE,EACJD,GAAO,KAGH,EAAAC,IAAM,GAAOC,EAAEC,EAAIN,KAbEK,IAa1B,CAKD,OAAOF,CACR,CAKAL,GAAO,QAAUG,KChFjB,IAAAM,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,yCAA0C,EAC1DC,GAAM,QAAS,+BAAgC,EAC/CC,GAAQ,QAAS,iCAAkC,EACnDC,GAAO,QAAS,0BAA2B,EAC3CC,GAAO,QAAS,yBAA0B,EAC1CC,EAAS,QAAS,uBAAwB,EAC1CC,GAAO,KACPC,GAAQ,KAMRC,EAAuB,GACvBC,EAAoB,EAyDxB,SAASC,GAAiBC,EAAI,CAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GANKP,EAAI,GAAO,EAAIA,IAAMZ,GACzBc,EAAO,IAEPA,EAAO,IAGHF,IAAMb,IAAQa,IAAMZ,GAExB,OAAAgB,EAAMV,EAAQ,IAAKI,CAAkB,EACrCK,EAAMT,EAAQ,IAAKG,CAAqB,EACjCK,EAAOE,EAAMD,EAGrB,GAAKH,IAAMA,EAEV,OAAAI,EAAMV,EAAQ,IAAKI,CAAkB,EACrCK,EAAM,IAAMT,EAAQ,IAAKG,EAAqB,CAAE,EACzCK,EAAOE,EAAMD,EAGrB,GAAKH,IAAM,EAEV,OAAAI,EAAMV,EAAQ,IAAKI,CAAkB,EACrCK,EAAMT,EAAQ,IAAKG,CAAqB,EACjCK,EAAOE,EAAMD,EAerB,GAbAH,EAAIV,GAAKU,CAAE,EAGXK,EAAId,GAAOS,CAAE,EAGbM,EAAIN,EAAIK,EAGRA,EAAIV,GAAMU,CAAE,EACZC,EAAIV,GAAOU,CAAE,EAGRD,EAEJD,EAAMC,EAAE,OAAS,MACX,CAEN,IAAME,EAAI,EAAGA,EAAID,EAAE,OAAQC,IAC1B,GAAKD,EAAGC,CAAE,IAAM,IAAM,CACrBN,EAAQM,EAAI,EACZ,KACD,CAGDH,EAAM,CAACH,CACR,CAEA,OAAAE,EAAME,EAAIC,EACLF,EAAM,GAELA,GAAO,CAACf,IAEZY,EAAQZ,EAAO,GAGhBc,EAAMA,EAAI,UAAWF,CAAM,GAG3BE,EAAMA,EAAI,UAAW,CAAE,EAGxBC,EAAMT,GAAMS,EAAMf,CAAK,EACvBe,EAAMX,GAAMW,EAAKN,EAAmB,GAAI,EAGxCK,EAAMX,GAAMW,EAAKN,EAAsB,GAAI,EAAE,UAAW,EAAGA,CAAqB,EAGzEK,EAAOE,EAAMD,CACrB,CAKAjB,GAAO,QAAUa,KC1LjB,IAAAS,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAgEA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCrEjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0DA,SAASC,GAAgBC,EAAI,CAE5B,OAAOA,EAAE,CACV,CAKAF,GAAO,QAAUC,KClEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkDA,IAAIC,GAAiB,KAKrBD,GAAO,QAAUC,KCvDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0DA,SAASC,GAAiBC,EAAI,CAE7B,OAAOA,IAAM,CACd,CAKAF,GAAO,QAAUC,KClEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkDA,IAAIC,GAAkB,KAKtBD,GAAO,QAAUC,KCvDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,SAAU,IAA4C,EASvED,EAAaC,EAAI,YAAa,IAA8C,EAS5ED,EAAaC,EAAI,oBAAqB,IAAwD,EAS9FD,EAAaC,EAAI,YAAa,IAA+C,EAS7ED,EAAaC,EAAI,aAAc,IAA+C,EAS9ED,EAAaC,EAAI,WAAY,IAA6C,EAS1ED,EAAaC,EAAI,eAAgB,IAAiD,EASlFD,EAAaC,EAAI,kBAAmB,IAAsD,EAS1FD,EAAaC,EAAI,iBAAkB,IAA8C,EASjFD,EAAaC,EAAI,kBAAmB,IAA+C,EASnFD,EAAaC,EAAI,UAAW,GAA6C,EAKzEF,GAAO,QAAUE,IC5IjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,OAAQ,IAAkC,EAK3DF,GAAO,QAAUE,KClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoDA,SAASC,GAAaC,EAAGC,EAAI,CAC5B,OAAKD,IAAMC,EACLD,IAAM,EACH,EAAMA,IAAM,EAAMC,EAEnB,GAECD,IAAMA,GAAKC,IAAMA,CAC3B,CAKAH,GAAO,QAAUC,KCjEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA2CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KChDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkDA,SAASC,GAAiBC,EAAGC,EAAI,CAChC,OAASD,IAAMC,GAASD,IAAMA,GAAKC,IAAMA,CAC1C,CAKAH,GAAO,QAAUC,KCzDjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA2CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KChDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,GAAaC,EAAI,cAAe,IAA6D,EAS7FD,GAAaC,EAAI,kBAAmB,IAAkE,EAKtGF,GAAO,QAAUE,IC3DjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,EACCD,KAAmB,GACvBC,EAAO,EAEPA,EAAO,EAMRF,GAAO,QAAUE,ICrCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAO,KAKPC,GAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,GAAa,MAAO,EAoDvD,SAASE,GAAaC,EAAI,CACzB,OAAAH,GAAc,CAAE,EAAIG,EACbF,GAAaF,EAAK,CAC1B,CAKAH,GAAO,QAAUM,KC1FjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCvCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,IACdC,GAAW,QAAS,mDAAoD,EACxEC,GAAO,QAAS,yCAA0C,EA2B9D,SAASC,GAAUC,EAAI,CAEtB,IAAIC,EAAOL,GAAaI,CAAE,EAG1B,OAAAC,GAASA,EAAOJ,MAAe,GAGvBI,EAAOH,GAAM,CACtB,CAKAH,GAAO,QAAUI,KCjEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA2CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KChDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAYnD,SAASC,GAAUC,EAAO,CACzB,IAAIC,EAAM,EACN,EACJ,IAAM,EAAI,EAAG,EAAID,EAAK,OAAQ,IACxBA,EAAM,CAAE,IAAM,MAClBC,GAAOH,GAAK,EAAK,EAAE,EAAE,EAAG,GAG1B,OAAOG,CACR,CAKAJ,GAAO,QAAUE,KChDjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,yCAA0C,EAC1DC,GAAM,QAAS,+BAAgC,EAC/CC,GAAS,QAAS,uBAAwB,EAC1CC,GAAW,KA8Df,SAASC,GAAkBC,EAAO,CACjC,IAAIC,EACAC,EACAC,EAEJ,GAAKH,EAAK,SAAW,GACpB,MAAM,IAAI,MAAOH,GAAQ,8EAA+E,GAAIG,CAAK,CAAE,EAYpH,GATAC,EAASD,EAAK,CAAC,IAAM,IAAQ,GAAO,EAGpCG,EAAM,SAAUH,EAAK,UAAU,EAAG,EAAE,EAAG,CAAE,EAAIL,EAG7CO,EAAOJ,GAAUE,EAAK,UAAW,EAAG,CAAE,EAGjCG,IAAQ,CAACR,EAAO,CACpB,GAAKO,IAAS,EACb,OAASD,IAAS,EAAQ,EAAM,GAEjCE,EAAM,KACP,KAEK,IAAKA,IAAQR,EAAK,EACtB,OAAKO,IAAS,EACJD,IAAS,EAAQR,GAAOC,GAE3B,IAKPQ,GAAQ,EAET,OAAOD,EAAOC,EAAON,GAAK,EAAKO,CAAI,CACpC,CAKAX,GAAO,QAAUO,KCnIjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAuEA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC5EjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,GAAa,QAAS,qBAAsB,EAC5CC,GAAW,QAAS,wBAAyB,EAM7CC,GAAS,WAGTC,GAAY,IAAIH,GAAY,CAAE,EAwBlC,SAASI,GAAgBC,EAAOC,EAAQC,EAAS,CAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKN,IAAW,EACfK,EAAIN,MACE,CAEN,IADAM,EAAIR,GACES,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAGC,CAAE,EAAIP,EAAOE,CAAO,EACvBA,GAAUD,EAEXC,EAAS,CACV,CACA,OAAAC,EAAO,IAAIP,GAAUU,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAW,EACrDZ,GACJW,EAAKF,EAAK,SAAUD,EAAQR,CAAiB,EAC7CU,EAAKD,EAAK,SAAUD,EAAO,EAAGR,CAAiB,IAE/CU,EAAKD,EAAK,SAAUD,EAAQR,CAAiB,EAC7CW,EAAKF,EAAK,SAAUD,EAAO,EAAGR,CAAiB,GAE3CW,EAAK,IACTA,GAAMR,IAEEO,EAAGP,GAAWQ,CACxB,CAKAZ,GAAO,QAAUM,KC3FjB,IAAAS,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCzCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,GACAC,EACAC,EAECH,KAAmB,IACvBE,EAAO,EACPC,EAAM,IAEND,EAAO,EACPC,EAAM,GAEPF,GAAU,CACT,KAAQC,EACR,IAAOC,CACR,EAKAJ,GAAO,QAAUE,KC9CjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAU,KAKVC,GAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,GAAa,MAAO,EAEnDE,GAAOH,GAAQ,KACfI,GAAMJ,GAAQ,IA6ElB,SAASK,GAAWC,EAAMC,EAAM,CAC/B,OAAAL,GAAaC,EAAK,EAAIG,EACtBJ,GAAaE,EAAI,EAAIG,EACdN,GAAc,CAAE,CACxB,CAKAJ,GAAO,QAAUQ,KCvHjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoDA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCzDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,EACCD,KAAmB,GACvBC,EAAM,EAENA,EAAM,EAMPF,GAAO,QAAUE,ICrCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAM,KAKNC,GAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,GAAa,MAAO,EAoDvD,SAASE,GAAYC,EAAI,CACxB,OAAAH,GAAc,CAAE,EAAIG,EACbF,GAAaF,EAAI,CACzB,CAKAH,GAAO,QAAUM,KC1FjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCvCjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAA0B,QAAS,2CAA4C,EAC/EC,GAAa,QAAS,sCAAuC,EAC7DC,GAAQ,QAAS,iCAAkC,EACnDC,GAAM,QAAS,+BAAgC,EAM/CC,GAAS,iBA8Cb,SAASC,GAAWC,EAAGC,EAAKC,EAAQC,EAAS,CAC5C,OAAKP,GAAOI,CAAE,GAAKL,GAAYK,CAAE,GAChCC,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,GAEHD,IAAM,GAAOH,GAAKG,CAAE,EAAIN,IAC5BO,EAAKE,CAAO,EAAIH,EAAIF,GACpBG,EAAKE,EAASD,CAAO,EAAI,IAClBD,IAERA,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,EACR,CAKAR,GAAO,QAAUM,KChGjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,IA2CV,SAASC,GAAWC,EAAI,CACvB,OAAOF,GAAKE,EAAG,CAAE,EAAK,CAAE,EAAG,EAAG,CAAE,CACjC,CAKAH,GAAO,QAAUE,KCxEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqDA,IAAIC,GAAc,QAAS,uDAAwD,EAC/EC,GAAO,KACPC,GAAS,IAKbF,GAAaC,GAAM,SAAUC,EAAO,EAKpCH,GAAO,QAAUE,KCjEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,EACCD,KAAmB,GACvBC,EAAO,EAEPA,EAAO,EAMRF,GAAO,QAAUE,ICrCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAO,KAKPC,EAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,EAAa,MAAO,EAgEvD,SAASE,GAAaC,EAAGC,EAAO,CAC/B,OAAAJ,EAAc,CAAE,EAAIG,EACpBF,GAAaF,EAAK,EAAMK,IAAS,EAC1BJ,EAAc,CAAE,CACxB,CAKAJ,GAAO,QAAUM,KCvGjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA8CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KCnDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,EACCD,KAAmB,GACvBC,EAAM,EAENA,EAAM,EAMPF,GAAO,QAAUE,ICrCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAM,KAKNC,EAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,EAAa,MAAO,EAwEvD,SAASE,GAAYC,EAAGC,EAAM,CAC7B,OAAAJ,EAAc,CAAE,EAAIG,EACpBF,GAAaF,EAAI,EAAMK,IAAQ,EACxBJ,EAAc,CAAE,CACxB,CAKAJ,GAAO,QAAUM,KC/GjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsDA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC3DjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,IA2BlB,SAASC,GAASC,EAAI,CAErB,IAAIC,EAAOH,GAAaE,CAAE,EAG1B,MAAS,GAAAC,IAAS,GACnB,CAKAJ,GAAO,QAAUE,KC5DjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA2CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KChDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAQ,QAAS,iCAAkC,EA4BvD,SAASC,GAAMC,EAAI,CAKlB,QAJIC,EAAM,GACNC,EAGIF,EAAI,GACXE,EAAIF,EAAI,EACRA,EAAIF,GAAOI,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAGd,OAAOA,CACR,CAKAJ,GAAO,QAAUE,KCtEjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAW,KACXC,GAAW,GAoBf,SAASC,GAAOC,EAAI,CACnB,IAAIC,EACAC,EACAC,EACAC,EAGJ,GADAH,EAAM,GACDD,IAAM,EACV,OAAOC,EAKR,IAHAG,EAAIP,EAGEM,EAAI,EAAGA,EAAIN,IAChBK,EAAIF,EAAI,EACHE,GAAK,GACTF,EAAIE,EAAI,EACRD,GAAO,IACFG,IAAMP,IACVO,EAAID,KAGLH,EAAIE,EACJD,GAAO,KAGH,EAAAC,IAAM,GAAOC,EAAEC,EAAIN,KAbEK,IAa1B,CAID,OAAOF,CACR,CAKAL,GAAO,QAAUG,KC/EjB,IAAAM,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,yCAA0C,EAC1DC,GAAQ,QAAS,iCAAkC,EACnDC,GAAiB,QAAS,2CAA4C,EACtEC,GAAM,QAAS,+BAAgC,EAC/CC,GAAQ,QAAS,iCAAkC,EACnDC,GAAO,QAAS,0BAA2B,EAC3CC,GAAO,QAAS,yBAA0B,EAC1CC,EAAS,QAAS,uBAAwB,EAC1CC,GAAO,KACPC,GAAQ,KAMRC,EAAoB,GACpBC,EAAuB,GAmD3B,SAASC,GAAgBC,EAAI,CAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GANKP,EAAI,GAAOX,GAAgBW,CAAE,EACjCE,EAAO,IAEPA,EAAO,IAGHF,IAAMf,IAAQe,IAAMd,GAExB,OAAAkB,EAAMV,EAAQ,IAAKG,CAAkB,EACrCM,EAAMT,EAAQ,IAAKI,CAAqB,EACjCI,EAAOE,EAAMD,EAGrB,GAAKf,GAAOY,CAAE,EAEb,OAAAI,EAAMV,EAAQ,IAAKG,CAAkB,EACrCM,EAAM,IAAMT,EAAQ,IAAKI,EAAqB,CAAE,EACzCI,EAAOE,EAAMD,EAGrB,GAAKH,IAAM,EAEV,OAAAI,EAAMV,EAAQ,IAAKG,CAAkB,EACrCM,EAAMT,EAAQ,IAAKI,CAAqB,EACjCI,EAAOE,EAAMD,EAerB,GAbAH,EAAIV,GAAKU,CAAE,EAGXK,EAAId,GAAOS,CAAE,EAGbM,EAAIN,EAAIK,EAGRA,EAAIV,GAAMU,CAAE,EACZC,EAAIV,GAAOU,CAAE,EAGRD,EAEJD,EAAMC,EAAE,OAAS,MACX,CAEN,IAAME,EAAI,EAAGA,EAAID,EAAE,OAAQC,IAC1B,GAAKD,EAAGC,CAAE,IAAM,IAAM,CACrBN,EAAQM,EAAI,EACZ,KACD,CAGDH,EAAM,CAACH,CACR,CAEA,OAAAE,EAAME,EAAIC,EACLF,EAAM,GAELA,GAAO,CAACjB,IAEZc,EAAQd,EAAO,GAGhBgB,EAAMA,EAAI,UAAWF,CAAM,GAG3BE,EAAMA,EAAI,UAAW,CAAE,EAGxBC,EAAMT,GAAMS,EAAMjB,CAAK,EACvBiB,EAAMX,GAAMW,EAAKP,EAAmB,GAAI,EAGxCM,EAAMX,GAAMW,EAAKL,EAAsB,GAAI,EAAE,UAAW,EAAGA,CAAqB,EAGzEI,EAAOE,EAAMD,CACrB,CAKAnB,GAAO,QAAUe,KCtLjB,IAAAS,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA6DA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KClEjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoDA,SAASC,GAAgBC,EAAI,CAE5B,OAAOA,EAAE,CACV,CAKAF,GAAO,QAAUC,KC5DjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAiDA,IAAIC,GAAiB,KAKrBD,GAAO,QAAUC,KCtDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,GAAa,QAAS,qBAAsB,EAC5CC,GAAW,QAAS,wBAAyB,EAC7CC,GAAQ,QAAS,iCAAkC,EAMnDC,GAAW,WAGXC,GAAS,WAmBb,SAASC,GAAqBC,EAAI,CACjC,IAAIC,EACAC,EACAC,EACAC,EAGJ,OADAH,EAAQ,IAAIP,GAAY,CAAE,EACrBM,IAAM,IAIXI,GAAMJ,EAAEH,MAAY,EAGpBM,EAAKP,GAAOI,EAAEF,EAAO,EAGrBI,EAAO,IAAIP,GAAUM,EAAM,MAAO,EAC7BR,GACJS,EAAK,UAAW,EAAGE,EAAIX,CAAiB,EACxCS,EAAK,UAAW,EAAGC,EAAIV,CAAiB,IAExCS,EAAK,UAAW,EAAGC,EAAIV,CAAiB,EACxCS,EAAK,UAAW,EAAGE,EAAIX,CAAiB,IAElCQ,CACR,CAKAT,GAAO,QAAUO,KCpFjB,IAAAM,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,GAAa,QAAS,qBAAsB,EAC5CC,GAAW,QAAS,wBAAyB,EAC7CC,GAAQ,QAAS,iCAAkC,EAMnDC,GAAW,WAGXC,GAAS,WAGTC,EAAQ,IAAIL,GAAY,CAAE,EAC1BM,EAAO,IAAIL,GAAUI,EAAM,MAAO,EAyBtC,SAASE,GAAqBC,EAAGC,EAAKC,EAAQC,EAAS,CACtD,IAAIC,EACAC,EACAC,EAEJ,GAAKN,IAAM,EAAI,CACd,IAAMM,EAAI,EAAGA,EAAIT,EAAM,OAAQS,IAC9BL,EAAKE,CAAO,EAAI,EAChBA,GAAUD,EAEX,OAAOD,CACR,CAeA,IAbAI,GAAML,EAAEL,MAAY,EAGpBS,EAAKV,GAAOM,EAAEJ,EAAO,EAGhBL,GACJO,EAAK,UAAW,EAAGO,EAAId,CAAiB,EACxCO,EAAK,UAAW,EAAGM,EAAIb,CAAiB,IAExCO,EAAK,UAAW,EAAGM,EAAIb,CAAiB,EACxCO,EAAK,UAAW,EAAGO,EAAId,CAAiB,GAEnCe,EAAI,EAAGA,EAAIT,EAAM,OAAQS,IAC9BL,EAAKE,CAAO,EAAIN,EAAOS,CAAE,EACzBH,GAAUD,EAEX,OAAOD,CACR,CAKAX,GAAO,QAAUS,KCnGjB,IAAAQ,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0CA,IAAIC,GAAc,QAAS,uDAAwD,EAC/EC,GAAO,KACPC,GAAS,KAKbF,GAAaC,GAAM,SAAUC,EAAO,EAKpCH,GAAO,QAAUE,KCtDjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoDA,SAASC,GAAiBC,EAAI,CAE7B,OAAOA,IAAM,CACd,CAKAF,GAAO,QAAUC,KC5DjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAiDA,IAAIC,GAAkB,KAKtBD,GAAO,QAAUC,KCtDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAiB,QAAS,iCAAkC,EAK5DC,GACAC,EACAC,GAECH,KAAmB,IACvBE,EAAO,EACPC,GAAM,IAEND,EAAO,EACPC,GAAM,GAEPF,GAAU,CACT,KAAQC,EACR,IAAOC,EACR,EAKAJ,GAAO,QAAUE,KC9CjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAc,QAAS,sBAAuB,EAC9CC,GAAe,QAAS,uBAAwB,EAChDC,GAAU,KAKVC,GAAe,IAAIF,GAAc,CAAE,EACnCG,GAAc,IAAIJ,GAAaG,GAAa,MAAO,EAEnDE,GAAOH,GAAQ,KACfI,GAAMJ,GAAQ,IA+DlB,SAASK,GAASC,EAAGC,EAAKC,EAAQC,EAAS,CAC1C,OAAAR,GAAc,CAAE,EAAIK,EACpBC,EAAKE,CAAO,EAAIP,GAAaC,EAAK,EAClCI,EAAKE,EAASD,CAAO,EAAIN,GAAaE,EAAI,EACnCG,CACR,CAKAV,GAAO,QAAUQ,KC1GjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,KAeV,SAASC,GAASC,EAAI,CACrB,OAAOF,GAAKE,EAAG,CAAE,EAAO,CAAM,EAAG,EAAG,CAAE,CACvC,CAKAH,GAAO,QAAUE,KC5CjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA8CA,IAAIC,GAAc,QAAS,uDAAwD,EAC/EC,GAAO,KACPC,GAAS,KAKbF,GAAaC,GAAM,SAAUC,EAAO,EAKpCH,GAAO,QAAUE,KC1DjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,SAAU,IAA4C,EASvED,EAAaC,EAAI,WAAY,IAA8C,EAS3ED,EAAaC,EAAI,mBAAoB,IAAwD,EAS7FD,EAAaC,EAAI,iBAAkB,IAAsD,EASzFD,EAAaC,EAAI,YAAa,IAAgD,EAS9ED,EAAaC,EAAI,cAAe,GAAmD,EASnFD,EAAaC,EAAI,aAAc,IAAkD,EASjFD,EAAaC,EAAI,YAAa,IAA+C,EAS7ED,EAAaC,EAAI,cAAe,IAAmD,EASnFD,EAAaC,EAAI,aAAc,IAAkD,EASjFD,EAAaC,EAAI,UAAW,IAA6C,EASzED,EAAaC,EAAI,iBAAkB,IAAsD,EASzFD,EAAaC,EAAI,mBAAoB,GAAgD,EASrFD,EAAaC,EAAI,iBAAkB,IAA8C,EASjFD,EAAaC,EAAI,sBAAuB,IAAoD,EAS5FD,EAAaC,EAAI,kBAAmB,GAA+C,EASnFD,EAAaC,EAAI,UAAW,IAA8C,EAK1EF,GAAO,QAAUE,IClMjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EAoBrD,SAASC,GAASC,EAAKC,EAAQ,CAC9B,GACCA,IAAU,MACV,OAAOA,GAAU,UACjBA,EAAM,OAAS,UACd,CACD,GAAKA,EAAM,QAAU,MACpB,MAAO,KAER,GAAKA,EAAM,QAAU,YACpB,OAAOJ,GAER,GAAKI,EAAM,QAAU,YACpB,OAAOH,EAET,CACA,OAAOG,CACR,CAKAL,GAAO,QAAUG,KCjEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC1CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,gCAAiC,EACjDC,GAAO,QAAS,gCAAiC,EACjDC,GAAS,QAAS,uBAAwB,EAgB9C,SAASC,GAAaC,EAAI,CACzB,GAAK,OAAOA,GAAM,SACjB,MAAM,IAAI,UAAWF,GAAQ,wDAAyDE,CAAE,CAAE,EAE3F,OAAKA,IAAMA,EACH,CACN,KAAQ,UACR,MAAS,KACV,EAEIA,IAAMJ,GACH,CACN,KAAQ,UACR,MAAS,WACV,EAEII,IAAMH,GACH,CACN,KAAQ,UACR,MAAS,WACV,EAEMG,CACR,CAKAL,GAAO,QAAUI,KCpEjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAkCA,IAAIC,GAAc,KAKlBD,GAAO,QAAUC,KCvCjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,GAAaC,EAAI,OAAQ,IAAkC,EAS3DD,GAAaC,EAAI,UAAW,IAAqC,EASjED,GAAaC,EAAI,SAAU,IAAqC,EAKhEF,GAAO,QAAUE,ICpEjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsCA,SAASC,GAAeC,EAAI,CAE3B,OAAOA,IAAM,CACd,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsCA,IAAIC,GAAgB,KAKpBD,GAAO,QAAUC,KC3CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,gBAAiB,GAA6C,EAK/EF,GAAO,QAAUE,KClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,OAAQ,IAAgC,EAKzDF,GAAO,QAAUE,KClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAS,QAAS,uBAAwB,EAC1CC,GAAM,QAAS,+BAAgC,EAK/CC,GAAQ,EAgCZ,SAASC,GAAuBC,EAAO,CACtC,IAAIC,EACA,EACJ,GAAKD,EAAK,SAAWF,GACpB,MAAM,IAAI,MAAOF,GAAQ,8EAA+EE,GAAOE,CAAK,CAAE,EAGvH,IADAC,EAAM,EACA,EAAI,EAAG,EAAID,EAAK,OAAQ,IACxBA,EAAM,CAAE,IAAM,MAClBC,GAAOJ,GAAK,EAAIC,GAAM,EAAE,CAAG,GAG7B,OAAOG,CACR,CAKAN,GAAO,QAAUI,KC9EjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA+CA,IAAIC,GAAwB,KAK5BD,GAAO,QAAUC,KCpDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAQ,QAAS,iCAAkC,EAKnDC,GAAQ,EA4BZ,SAASC,GAAMC,EAAI,CAClB,IAAIC,EAAM,GACN,EACAC,EAIJ,IADA,EAAIJ,GACIE,EAAI,GAAK,GAChBE,EAAIF,EAAI,EACRA,EAAIH,GAAOK,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAEb,GAAK,EAEN,OAAOA,CACR,CAKAL,GAAO,QAAUG,KC9EjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,yBAA0B,EAC1CC,GAAO,KAKPC,GAAQ,EA0BZ,SAASC,GAAgBC,EAAI,CAC5B,IAAIC,EAGJ,OAAAA,EAAIJ,GAAMG,CAAE,EAGZC,EAAIL,GAAMK,EAAGH,GAAO,GAAI,EAEjBG,CACR,CAKAN,GAAO,QAAUI,KCrEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0CA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC/CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,wBAAyB,IAAsD,EAShGD,GAAaC,GAAI,sBAAuB,IAAoD,EAK5FF,GAAO,QAAUE,KC3DjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,OAAQ,IAAgC,EAKzDF,GAAO,QAAUE,KClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAS,QAAS,uBAAwB,EAC1CC,GAAM,QAAS,+BAAgC,EAK/CC,GAAQ,GAgCZ,SAASC,GAAwBC,EAAO,CACvC,IAAIC,EACA,EACJ,GAAKD,EAAK,SAAWF,GACpB,MAAM,IAAI,MAAOF,GAAQ,8EAA+EE,GAAOE,CAAK,CAAE,EAGvH,IADAC,EAAM,EACA,EAAI,EAAG,EAAID,EAAK,OAAQ,IACxBA,EAAM,CAAE,IAAM,MAClBC,GAAOJ,GAAK,EAAIC,GAAM,EAAE,CAAG,GAG7B,OAAOG,CACR,CAKAN,GAAO,QAAUI,KC9EjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA+CA,IAAIC,GAAyB,KAK7BD,GAAO,QAAUC,KCpDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAQ,QAAS,iCAAkC,EAKnDC,GAAQ,GA4BZ,SAASC,GAAMC,EAAI,CAClB,IAAIC,EAAM,GACN,EACAC,EAIJ,IADA,EAAIJ,GACIE,EAAI,GAAK,GAChBE,EAAIF,EAAI,EACRA,EAAIH,GAAOK,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAEb,GAAK,EAEN,OAAOA,CACR,CAKAL,GAAO,QAAUG,KC9EjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,yBAA0B,EAC1CC,GAAO,KAKPC,GAAQ,GA0BZ,SAASC,GAAgBC,EAAI,CAC5B,IAAIC,EAGJ,OAAAA,EAAIJ,GAAMG,CAAE,EAGZC,EAAIL,GAAMK,EAAGH,GAAO,GAAI,EAEjBG,CACR,CAKAN,GAAO,QAAUI,KCrEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAyCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC9CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,yBAA0B,IAAuD,EASlGD,GAAaC,GAAI,uBAAwB,IAAqD,EAK9FF,GAAO,QAAUE,KC3DjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,OAAQ,IAAiC,EAK1DF,GAAO,QAAUE,KClDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAC/CC,GAAS,QAAS,uBAAwB,EAC1CC,GAAW,IAKXC,GAAQ,GAgCZ,SAASC,GAAwBC,EAAO,CACvC,IAAIC,EACA,EACJ,GAAKD,EAAK,SAAWF,GACpB,MAAM,IAAI,MAAOF,GAAQ,8EAA+EE,GAAOE,CAAK,CAAE,EAGvH,IADAC,EAAM,EACA,EAAI,EAAG,EAAID,EAAK,OAAQ,IACxBA,EAAM,CAAE,IAAM,MAClBC,GAAON,GAAK,EAAIG,GAAM,EAAE,CAAG,GAG7B,OAAOD,GAAUI,CAAI,CACtB,CAKAP,GAAO,QAAUK,KC/EjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA+CA,IAAIC,GAAyB,KAK7BD,GAAO,QAAUC,KCpDjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAW,IAMXC,GAAYD,GAAU,EAAG,EA8B7B,SAASE,GAAQC,EAAGC,EAAQ,CAC3B,OAAAA,GAASH,GACFD,GAAYG,GAAKC,EAAWD,KAAQ,CAACC,EAASH,GAAY,CAClE,CAKAF,GAAO,QAAUG,KClEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAyCA,IAAIC,GAAS,KAKbD,GAAO,QAAUC,KC9CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAW,IAMXC,GAAYD,GAAU,EAAG,EA8B7B,SAASE,GAAQC,EAAGC,EAAQ,CAC3B,OAAAA,GAASH,GACFD,GAAYG,IAAMC,EAAWD,IAAO,CAACC,EAASH,GAAY,CAClE,CAKAF,GAAO,QAAUG,KClEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAyCA,IAAIC,GAAS,KAKbD,GAAO,QAAUC,KC9CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAQ,QAAS,iCAAkC,EAKnDC,GAAQ,GA4BZ,SAASC,GAAMC,EAAI,CAClB,IAAIC,EAAM,GACN,EACAC,EAIJ,IADA,EAAIJ,GACIE,EAAI,GAAK,GAChBE,EAAIF,EAAI,EACRA,EAAIH,GAAOK,CAAE,EACRA,IAAMF,EACVC,EAAM,IAAMA,EAEZA,EAAM,IAAMA,EAEb,GAAK,EAEN,OAAOA,CACR,CAKAL,GAAO,QAAUG,KC9EjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAO,QAAS,yBAA0B,EAC1CC,GAAO,KAKPC,GAAQ,GA0BZ,SAASC,GAAgBC,EAAI,CAC5B,IAAIC,EAGJ,OAAAA,EAAIJ,GAAMG,CAAE,EAGZC,EAAIL,GAAMK,EAAGH,GAAO,GAAI,EAEjBG,CACR,CAKAN,GAAO,QAAUI,KCrEjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAyCA,IAAIC,GAAO,KAKXD,GAAO,QAAUC,KC9CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsCA,SAASC,GAAeC,EAAI,CAE3B,OAAOA,EAAE,CACV,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsCA,IAAIC,GAAgB,KAKpBD,GAAO,QAAUC,KC3CjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,yBAA0B,IAAuD,EASlGD,EAAaC,EAAI,SAAU,IAAyC,EASpED,EAAaC,EAAI,SAAU,IAAyC,EASpED,EAAaC,EAAI,uBAAwB,IAAqD,EAS9FD,EAAaC,EAAI,gBAAiB,IAA6C,EAK/EF,GAAO,QAAUE,ICtFjB,IAAAC,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cA0BA,IAAIC,GAAc,QAAS,yCAA0C,EAUjEC,GAAK,CAAC,EASVD,GAAaC,GAAI,OAAQ,IAAiC,EAK1DF,GAAO,QAAUE,KCxBjB,IAAIC,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,SAAU,IAAuB,EASlDD,EAAaC,EAAI,UAAW,IAA0B,EAStDD,EAAaC,EAAI,UAAW,IAA0B,EAStDD,EAAaC,EAAI,QAAS,IAAwB,EASlDD,EAAaC,EAAI,QAAS,IAAwB,EASlDD,EAAaC,EAAI,SAAU,IAAyB,EASpDD,EAAaC,EAAI,SAAU,IAAyB,EAKpD,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isSameValuef", "a", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isSameValueZerof", "a", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "Float32Array", "Uint32Array", "FLOAT32_VIEW", "UINT32_VIEW", "toWordf", "x", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "getWord", "BIAS", "EXP_MASK", "exponentf", "x", "w", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "fround", "require_polyfill", "__commonJSMin", "exports", "module", "Float32Array", "FLOAT32_VIEW", "float64ToFloat32", "x", "require_lib", "__commonJSMin", "exports", "module", "builtin", "polyfill", "float64ToFloat32", "require_tofrac", "__commonJSMin", "exports", "module", "pow", "toFrac", "frac", "sum", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "BIAS", "pow", "format", "toFloat32", "toFrac", "fromBinaryStringf", "bstr", "sign", "frac", "exp", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float32Array", "UINT32_VIEW", "FLOAT32_VIEW", "fromWordf", "word", "require_lib", "__commonJSMin", "exports", "module", "main", "require_assign", "__commonJSMin", "exports", "module", "FLOAT32_SMALLEST_NORMAL", "PINF", "NINF", "abs", "toFloat32", "SCALAR", "normalizef", "x", "out", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "normalize", "normalizef", "x", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "assign", "require_main", "__commonJSMin", "exports", "module", "toWord", "signbitf", "x", "w", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "getWord", "MASK", "significandf", "x", "w", "require_lib", "__commonJSMin", "exports", "module", "main", "require_div2", "__commonJSMin", "exports", "module", "floor", "div2", "x", "str", "y", "require_mult2", "__commonJSMin", "exports", "module", "MAX_ITER", "MAX_BITS", "mult2", "x", "str", "y", "i", "j", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "BIAS", "abs", "floor", "rpad", "lpad", "repeat", "div2", "mult2", "NUM_SIGNIFICAND_BITS", "NUM_EXPONENT_BITS", "toBinaryStringf", "x", "nbits", "sign", "str", "exp", "n", "f", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "float32ToInt32", "x", "require_lib", "__commonJSMin", "exports", "module", "float32ToInt32", "require_main", "__commonJSMin", "exports", "module", "float32ToUint32", "x", "require_lib", "__commonJSMin", "exports", "module", "float32ToUint32", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "isSameValue", "a", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isSameValueZero", "a", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_high", "__commonJSMin", "exports", "module", "isLittleEndian", "HIGH", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "HIGH", "FLOAT64_VIEW", "UINT32_VIEW", "getHighWord", "x", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "getHighWord", "EXP_MASK", "BIAS", "exponent", "x", "high", "require_lib", "__commonJSMin", "exports", "module", "main", "require_todouble", "__commonJSMin", "exports", "module", "pow", "toDouble", "frac", "sum", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "BIAS", "pow", "format", "toDouble", "fromBinaryString", "bstr", "sign", "frac", "exp", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "IS_LITTLE_ENDIAN", "Uint8Array", "DataView", "TWO_32", "WORKSPACE", "fromInt64Bytes", "bytes", "stride", "offset", "view", "hi", "lo", "b", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_indices", "__commonJSMin", "exports", "module", "isLittleEndian", "indices", "HIGH", "LOW", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "indices", "FLOAT64_VIEW", "UINT32_VIEW", "HIGH", "LOW", "fromWords", "high", "low", "require_lib", "__commonJSMin", "exports", "module", "main", "require_low", "__commonJSMin", "exports", "module", "isLittleEndian", "LOW", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "LOW", "FLOAT64_VIEW", "UINT32_VIEW", "getLowWord", "x", "require_lib", "__commonJSMin", "exports", "module", "main", "require_assign", "__commonJSMin", "exports", "module", "FLOAT64_SMALLEST_NORMAL", "isInfinite", "isnan", "abs", "SCALAR", "normalize", "x", "out", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "fcn", "normalize", "x", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "assign", "require_high", "__commonJSMin", "exports", "module", "isLittleEndian", "HIGH", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "HIGH", "FLOAT64_VIEW", "UINT32_VIEW", "setHighWord", "x", "high", "require_lib", "__commonJSMin", "exports", "module", "main", "require_low", "__commonJSMin", "exports", "module", "isLittleEndian", "LOW", "require_main", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "LOW", "FLOAT64_VIEW", "UINT32_VIEW", "setLowWord", "x", "low", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "getHighWord", "signbit", "x", "high", "require_lib", "__commonJSMin", "exports", "module", "main", "require_div2", "__commonJSMin", "exports", "module", "floor", "div2", "x", "str", "y", "require_mult2", "__commonJSMin", "exports", "module", "MAX_ITER", "MAX_BITS", "mult2", "x", "str", "y", "i", "j", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "BIAS", "isnan", "isNegativeZero", "abs", "floor", "rpad", "lpad", "repeat", "div2", "mult2", "NUM_EXPONENT_BITS", "NUM_SIGNIFICAND_BITS", "toBinaryString", "x", "nbits", "sign", "str", "exp", "n", "f", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "float64ToInt32", "x", "require_lib", "__commonJSMin", "exports", "module", "float64ToInt32", "require_main", "__commonJSMin", "exports", "module", "IS_LITTLE_ENDIAN", "Uint8Array", "DataView", "floor", "LOW_MASK", "TWO_32", "float64ToInt64Bytes", "x", "bytes", "view", "hi", "lo", "require_assign", "__commonJSMin", "exports", "module", "IS_LITTLE_ENDIAN", "Uint8Array", "DataView", "floor", "LOW_MASK", "TWO_32", "BYTES", "VIEW", "float64ToInt64Bytes", "x", "out", "stride", "offset", "hi", "lo", "i", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "assign", "require_main", "__commonJSMin", "exports", "module", "float64ToUint32", "x", "require_lib", "__commonJSMin", "exports", "module", "float64ToUint32", "require_indices", "__commonJSMin", "exports", "module", "isLittleEndian", "indices", "HIGH", "LOW", "require_assign", "__commonJSMin", "exports", "module", "Uint32Array", "Float64Array", "indices", "FLOAT64_VIEW", "UINT32_VIEW", "HIGH", "LOW", "toWords", "x", "out", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "fcn", "toWords", "x", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "assign", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "reviver", "key", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "format", "number2json", "x", "require_lib", "__commonJSMin", "exports", "module", "number2json", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "int32ToUint32", "x", "require_lib", "__commonJSMin", "exports", "module", "int32ToUint32", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "format", "pow", "NBITS", "fromBinaryStringUint8", "bstr", "sum", "require_lib", "__commonJSMin", "exports", "module", "fromBinaryStringUint8", "require_div2", "__commonJSMin", "exports", "module", "floor", "NBITS", "div2", "x", "str", "y", "require_main", "__commonJSMin", "exports", "module", "lpad", "div2", "NBITS", "toBinaryString", "x", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "format", "pow", "NBITS", "fromBinaryStringUint16", "bstr", "sum", "require_lib", "__commonJSMin", "exports", "module", "fromBinaryStringUint16", "require_div2", "__commonJSMin", "exports", "module", "floor", "NBITS", "div2", "x", "str", "y", "require_main", "__commonJSMin", "exports", "module", "lpad", "div2", "NBITS", "toBinaryString", "x", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "pow", "format", "toUint32", "NBITS", "fromBinaryStringUint32", "bstr", "sum", "require_lib", "__commonJSMin", "exports", "module", "fromBinaryStringUint32", "require_main", "__commonJSMin", "exports", "module", "toUint32", "MAX_SHIFT", "rotl32", "x", "shift", "require_lib", "__commonJSMin", "exports", "module", "rotl32", "require_main", "__commonJSMin", "exports", "module", "toUint32", "MAX_SHIFT", "rotr32", "x", "shift", "require_lib", "__commonJSMin", "exports", "module", "rotr32", "require_div2", "__commonJSMin", "exports", "module", "floor", "NBITS", "div2", "x", "str", "y", "require_main", "__commonJSMin", "exports", "module", "lpad", "div2", "NBITS", "toBinaryString", "x", "b", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "uint32ToInt32", "x", "require_lib", "__commonJSMin", "exports", "module", "uint32ToInt32", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "setReadOnly", "ns"]
}
